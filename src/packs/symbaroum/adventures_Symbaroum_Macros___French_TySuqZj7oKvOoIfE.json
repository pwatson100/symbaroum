{
  "name": "Symbaroum Macros - French",
  "img": "systems/symbaroum/asset/image/cover-system-adv.webp",
  "caption": "",
  "sort": 0,
  "description": "<p>This contains useful macros in French. Note that there are additional Macros in the English one that you might want to use.</p>",
  "actors": [],
  "combats": [],
  "items": [],
  "journal": [],
  "scenes": [],
  "tables": [],
  "macros": [
    {
      "name": "Perception",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/eye.svg",
      "scope": "global",
      "command": "main()\n\nasync function main(){\n    let selected = canvas.tokens.controlled;\n    if(selected.length > 1 || selected.length == 0){\n        ui.notifications.error(\"Sélectionnez votre token, et uniquement ce token\")\n        return;\n    }\n    let actor = selected[0].actor;\n\n    let targetData = {hasTarget : false};\n    const attribute = actor.data.data.attributes[\"vigilant\"];\n    let vigilantValue = attribute.value + actor.data.data.bonus[\"vigilant\"];\n    let subImg;\n    let attributeRoll = await new Roll(\"1d20\").evaluate();\n    let resultText;\n\n    let margin = vigilantValue - attributeRoll.total\n    if(attributeRoll.total <= vigilantValue){\n        resultText = actor.data.name + \" réussit avec une marge de +\" + margin.toString();\n        subImg = \"icons/sundries/lights/candle-lit-yellow.webp\";\n    }\n    else{\n        resultText = actor.data.name + \" échoue avec une marge de \" + margin.toString();\n        subImg = \"icons/commodities/treasure/token-white-skull.webp\";\n    }\n\n    let templateData = {\n        targetData : targetData,\n        hasTarget : false,\n        introText: \"Jet de Perception de \" + actor.data.name,\n        introImg: actor.data.img,\n        targetText: \"\",\n        subText:  `Vigilance : ${vigilantValue}`,\n        subImg: \"\",\n        hasRoll: false,\n        rollString: \"\",\n        rollResult : \"\",\n        resultText: resultText,\n        finalText: \"\"\n    };\n\n    const html = await renderTemplate(\"systems/symbaroum/template/chat/ability.html\", templateData);\n    const chatData = {\n        user: game.user._id,\n        content: html\n    }\n    attributeRoll.toMessage({ flavor: html}, {rollMode: \"blindroll\"})\n}",
      "flags": {
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296884263,
        "modifiedTime": 1717742549158,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.muqaE6sYg5EcC3ox",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "1tloLWrKpvY8kzF0",
      "sort": 0,
      "_id": "gpG4bzNPiDCdvO0D"
    },
    {
      "name": "Importation de PNJ",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/angel.svg",
      "scope": "global",
      "command": "/**\n * To use this macro, paste monster data from a pdf, for the core book:\n * including the name of the monster, to the end of the \"Tactics\" section\n * \n * For the monster codex, manually type in the name, then copy from Manners to end of tactics and paste.\n * Warning: the tilted character sheet can cause issues, depending on your pdf viewer, you might need to do those manually.\n * \n * WARNING: If you have multiple items that matches the name of abilities, traits and mystical powers, they might be found instead.\n *  \n * Make sure you have all abilities, traits and powers in the \"Items\" in Foundry.\n * \n */\n\n (()=>{\n    let dialog_content = `  \n    <div class=\"symbaroum dialog\">\n        <div style=\"width:100%; text-align:center\">\n            <h3><a href=\"https://freeleaguepublishing.com/en/store/?product_id=7092032045205\" target=\"_blank\">Symbaroum</a> Importation de personnage depuis pdf</h3>\n        </div>\n        <div class=\"advantage\">\n            <label for=\"isplayer\">PJ</label>\n            <span class=\"lblfavour\"><input type=\"checkbox\" id=\"isplayer\" name=\"isplayer\"></span>\n        </div>\n        <div class=\"advantage\">\n            <label for=\"npctext\">Copier depuis le PDF et collez ici les données du personnage</label>\n            <input name=\"npctext\" type=\"text\">\n        </div>\n    </div>`;\n  \n    let x = new Dialog({\n      content : dialog_content,\n      buttons : \n      {\n        Ok : { label : `Ok`, callback : async (html)=> await extractAllData(html.find('[name=npctext]')[0].value.replace(/[\\r|\\n]/g, \"\"), html.find(\"#isplayer\")[0].checked)},\n        Cancel : {label : `Annuler`}\n      }\n    });\n  \n    x.options.width = 400;\n    x.position.width = 400;\n  \n    x.render(true);\n  \n})();\n\nasync function extractSpecialItems(actorItems, type, abilitilist, abilityPattern)\n{\n    let message = \"\";\n    if( abilitilist !== null) {\n        await abilitilist.forEach(async element => { \n            let tmpdata = element.trim().match(abilityPattern);\n            if( tmpdata != null && tmpdata.length == 3)\n            {\n                let higherLevel = false;\n                let ability = game.items.filter(element => element.name.trim().toLowerCase() === tmpdata[1].trim().toLowerCase() && element.type === type);\n                if(ability.length > 0 )\n                {\n                    ability = duplicate(ability[0].data);\n                    let abilityAction = \"\";\n\n                    // Master ability\n                    if(tmpdata[2] === \"maître\" || tmpdata[2] === \"Maître\" || tmpdata[2] === \"III\") {                    \n                        higherLevel = true;\n                        setProperty(ability, \"data.master.isActive\",true);                                            \n                    }                \n                    abilityAction = getProperty(ability, \"data.master.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.master.action\", \"A\");\n                    }\n                    // Adept ability\n                    if(tmpdata[2] === \"adepte\" || tmpdata[2] === \"Adepte\" || tmpdata[2] === \"II\" || higherLevel) {                \n                        higherLevel = true;\n                        setProperty(ability, \"data.adept.isActive\",true);                        \n\n                    }    \n                    abilityAction = getProperty(ability, \"data.adept.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.adept.action\", \"A\");\n                    }\n                    // Novice ability\n                    if(tmpdata[2] === \"novice\" || tmpdata[2] === \"Novice\" || tmpdata[2] === \"I\" || higherLevel) {                              \n                        setProperty(ability, \"data.novice.isActive\",true);                        \n                    }\n                    abilityAction = getProperty(ability, \"data.novice.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.novice.action\", \"A\");\n                    }\n                    // console.log(\"Final ability \"+JSON.stringify(ability));\n                    actorItems.push(ability);\n\n                    if(ability.data.reference === \"undead\"){\n                        let nopainthreshold = game.items.filter(element => element.data.data.reference === \"nopainthreshold\");\n                        if(nopainthreshold.length > 0 )\n                        {\n                            nopainthreshold = duplicate(nopainthreshold[0].data);\n                            actorItems.push(nopainthreshold);\n                        }\n                    }\n                }\n                else if( type !== \"mysticalPower\" && type !== \"ability\" )\n                {\n                    message += `${element} n'a pas pu être ajouté en tant que ${type} - ajoutez-le à la main si besoin.</br>`;\n                }\n            }\n            else if( element.trim() !== \"\")\n            {\n                // message += `${element} not added - not found under Items - add manually <br/>`;\n                console.log(\"L'élément[\"+element+\"] n'a pas été trouvé - ajoutez-le à la main.\");\n            }\n        });\n\n    }    \n    return message;    \n}\n\nasync function extractAllData(npcData, player)\n{\n    let additionalInfo = \"\";\n    let actorItems = [];\n\n    let extractData = function(inputData, inputPattern) {\n        let tmp = inputData.match(inputPattern);\n        if( tmp != null && tmp.length >= 2) {\n            // successful match\n            return tmp[1];\n        }\n        return \"nomatch\";\n    };\n    let expectedData = npcData.replace(/- /g,\"\");\n\n    let namePattern = /^(.+?) [Race|Manières]+/;\n    let newValues = {\n        name: extractData(expectedData,namePattern),\n        type: player ? \"player\": \"monster\",\n        folder: null,\n        sort: 12000,\n        data: {},\n        token: {},\n        items: [],\n        flags: {},\n //       img: \"worlds/Shared_data/Tokens/argasto.png\"      \n    }\n\n    let mannerPattern = /Manières (.*) Race /;\n    setProperty(newValues, \"data.bio.manner\",extractData(expectedData,mannerPattern));\n\n    let racePattern = /Race (.*) Résistance/;\n    setProperty(newValues, \"data.bio.race\",extractData(expectedData,racePattern));\n\n    let attributePattern = /Précision ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.accurate.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Astuce ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.cunning.value\", parseInt(extractData(expectedData,attributePattern)));    \n    attributePattern = /Discrétion ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.discreet.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Persuasion ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.persuasive.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Agilité ([0-9]+).+\\)/;\n    setProperty(newValues, \"data.attributes.quick.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Volonté ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.resolute.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Force ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.strong.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Vigilance ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.vigilant.value\", parseInt(extractData(expectedData,attributePattern)));\n\n    let shadowPattern = /Ombre (.*) \\(/;  \n    setProperty(newValues, \"data.bio.shadow\", extractData(expectedData,shadowPattern));\n    \n    // If nomatch == thouroughly corrupt\n    let corruptionPattern = /\\([Cc]orruption[ ]: ([0-9]+).?\\)/;\n    // console.log(\"Permanent Corruption[\"+extractData(expectedData,corruptionPattern)+\"]\");   \n    let corr = extractData(expectedData,corruptionPattern);\n    if( corr !== null && corr !== \"nomatch\" ) {\n        setProperty(newValues, \"data.health.corruption.permanent\", parseInt(extractData(expectedData,corruptionPattern))); \n    }\n    else {\n        let fullyCorruptedItem = game.items.filter(element => element.data.data.reference === \"thoroughlycorrupt\");\n        if(fullyCorruptedItem.length > 0 )\n        {\n            fullyCorruptedItem = duplicate(fullyCorruptedItem[0].data);\n            actorItems.push(fullyCorruptedItem);\n        }\n    }\n\n\n    let tacticsPattern = / [Tactique :|Tactiques :] (.*)/;\n    // console.log(\"Tactics[\"+extractData(expectedData,tacticsPattern)+\"]\");\n    setProperty(newValues, \"data.bio.tactics\", extractData(expectedData,tacticsPattern));\n\n    let actor = await Actor.create(newValues);\n\n    let abilitiesPattern = /Talents (.*) Armes /;\n    let singleAbilityPattern = /([^,^\\)]+?\\))?/g;\n    let abilityPattern = / ?([^\\(]+)\\((.+)\\)/;\n    let allAbilities = extractData(expectedData,abilitiesPattern);\n    let abilitilist = allAbilities.match(singleAbilityPattern);\n    // Normal abilities\n    // Medicus (master), \n    additionalInfo += await extractSpecialItems(actorItems, \"ability\", abilitilist, abilityPattern);\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, abilityPattern);\n    // Mystical Power\n    let singleMysticalPowerPattern = /[Pp]ouvoir [Mm]ystique \\(([^\\)]*)\\)/g;\n    abilitilist = allAbilities.match(singleMysticalPowerPattern);\n    let mysticalPowerPattern = /\\(([^,]+), (.*)\\)/\n    console.log(\"abilitylist[mp]:\"+JSON.stringify(abilitilist));\n    // Mystical Power (Bend Will, master)\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, mysticalPowerPattern);\n\n    // Mystical Power (Bend Will, master)\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, mysticalPowerPattern);\n\n    let traitsPattern = /Traits (.+) Agilité [0-9]/;\n    let traitstlist = extractData(expectedData,traitsPattern).match(singleAbilityPattern);\n    additionalInfo += await extractSpecialItems(actorItems, \"trait\", traitstlist, abilityPattern);\n\n    let updateObj = await actor.createEmbeddedDocuments(\"Item\", actorItems);\n    // console.log(\"updateObj \"+JSON.stringify(updateObj));\n    \n    let healMe = {_id:actor.id};\n    setProperty(healMe, \"data.health.toughness.value\", getProperty(actor, \"data.data.health.toughness.max\") );\n    await Actor.updateDocuments([healMe]);\n\n    let message = `${actor.name} a été créé.</br>${additionalInfo}`;\n    ChatMessage.create({\n        speaker: ChatMessage.getSpeaker({alias: \"Macro Importation de PNJ\"}),\n        whisper: [game.user],\n        content: message\n    });\n\n    actor.sheet.render(true);\n}",
      "flags": {
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296884263,
        "modifiedTime": 1717742549158,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.YCvOsXMPWHe5wDWR",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "1tloLWrKpvY8kzF0",
      "sort": 0,
      "_id": "yPtlWcojOE8Ty2Qo"
    },
    {
      "name": "Importation de PNJ",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/angel.svg",
      "scope": "global",
      "command": "/**\n * To use this macro, paste monster data from a pdf, for the core book:\n * including the name of the monster, to the end of the \"Tactics\" section\n * \n * For the monster codex, manually type in the name, then copy from Manners to end of tactics and paste.\n * Warning: the tilted character sheet can cause issues, depending on your pdf viewer, you might need to do those manually.\n * \n * WARNING: If you have multiple items that matches the name of abilities, traits and mystical powers, they might be found instead.\n *  \n * Make sure you have all abilities, traits and powers in the \"Items\" in Foundry.\n * \n */\n\n (()=>{\n    let dialog_content = `  \n    <div class=\"symbaroum dialog\">\n        <div style=\"width:100%; text-align:center\">\n            <h3><a href=\"https://freeleaguepublishing.com/en/store/?product_id=7092032045205\" target=\"_blank\">Symbaroum</a> Importation de personnage depuis pdf</h3>\n        </div>\n        <div class=\"advantage\">\n            <label for=\"isplayer\">PJ</label>\n            <span class=\"lblfavour\"><input type=\"checkbox\" id=\"isplayer\" name=\"isplayer\"></span>\n        </div>\n        <div class=\"advantage\">\n            <label for=\"npctext\">Copier depuis le PDF et collez ici les données du personnage</label>\n            <input name=\"npctext\" type=\"text\">\n        </div>\n    </div>`;\n  \n    let x = new Dialog({\n      content : dialog_content,\n      buttons : \n      {\n        Ok : { label : `Ok`, callback : async (html)=> await extractAllData(html.find('[name=npctext]')[0].value.replace(/[\\r|\\n]/g, \"\"), html.find(\"#isplayer\")[0].checked)},\n        Cancel : {label : `Annuler`}\n      }\n    });\n  \n    x.options.width = 400;\n    x.position.width = 400;\n  \n    x.render(true);\n  \n})();\n\nasync function extractSpecialItems(actorItems, type, abilitilist, abilityPattern)\n{\n    let message = \"\";\n    if( abilitilist !== null) {\n        await abilitilist.forEach(async element => { \n            let tmpdata = element.trim().match(abilityPattern);\n            if( tmpdata != null && tmpdata.length == 3)\n            {\n                let higherLevel = false;\n                let ability = game.items.filter(element => element.name.trim().toLowerCase() === tmpdata[1].trim().toLowerCase() && element.type === type);\n                if(ability.length > 0 )\n                {\n                    ability = duplicate(ability[0].data);\n                    let abilityAction = \"\";\n\n                    // Master ability\n                    if(tmpdata[2] === \"maître\" || tmpdata[2] === \"Maître\" || tmpdata[2] === \"III\") {                    \n                        higherLevel = true;\n                        setProperty(ability, \"data.master.isActive\",true);                                            \n                    }                \n                    abilityAction = getProperty(ability, \"data.master.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.master.action\", \"A\");\n                    }\n                    // Adept ability\n                    if(tmpdata[2] === \"adepte\" || tmpdata[2] === \"Adepte\" || tmpdata[2] === \"II\" || higherLevel) {                \n                        higherLevel = true;\n                        setProperty(ability, \"data.adept.isActive\",true);                        \n\n                    }    \n                    abilityAction = getProperty(ability, \"data.adept.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.adept.action\", \"A\");\n                    }\n                    // Novice ability\n                    if(tmpdata[2] === \"novice\" || tmpdata[2] === \"Novice\" || tmpdata[2] === \"I\" || higherLevel) {                              \n                        setProperty(ability, \"data.novice.isActive\",true);                        \n                    }\n                    abilityAction = getProperty(ability, \"data.novice.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.novice.action\", \"A\");\n                    }\n                    // console.log(\"Final ability \"+JSON.stringify(ability));\n                    actorItems.push(ability);\n\n                    if(ability.data.reference === \"undead\"){\n                        let nopainthreshold = game.items.filter(element => element.data.data.reference === \"nopainthreshold\");\n                        if(nopainthreshold.length > 0 )\n                        {\n                            nopainthreshold = duplicate(nopainthreshold[0].data);\n                            actorItems.push(nopainthreshold);\n                        }\n                    }\n                }\n                else if( type !== \"mysticalPower\" && type !== \"ability\" )\n                {\n                    message += `${element} n'a pas pu être ajouté en tant que ${type} - ajoutez-le à la main si besoin.</br>`;\n                }\n            }\n            else if( element.trim() !== \"\")\n            {\n                // message += `${element} not added - not found under Items - add manually <br/>`;\n                console.log(\"L'élément[\"+element+\"] n'a pas été trouvé - ajoutez-le à la main.\");\n            }\n        });\n\n    }    \n    return message;    \n}\n\nasync function extractAllData(npcData, player)\n{\n    let additionalInfo = \"\";\n    let actorItems = [];\n\n    let extractData = function(inputData, inputPattern) {\n        let tmp = inputData.match(inputPattern);\n        if( tmp != null && tmp.length >= 2) {\n            // successful match\n            return tmp[1];\n        }\n        return \"nomatch\";\n    };\n    let expectedData = npcData.replace(/- /g,\"\");\n\n    let namePattern = /^(.+?) [Race|Manières]+/;\n    let newValues = {\n        name: extractData(expectedData,namePattern),\n        type: player ? \"player\": \"monster\",\n        folder: null,\n        sort: 12000,\n        data: {},\n        token: {},\n        items: [],\n        flags: {},\n //       img: \"worlds/Shared_data/Tokens/argasto.png\"      \n    }\n\n    let mannerPattern = /Manières (.*) Race /;\n    setProperty(newValues, \"data.bio.manner\",extractData(expectedData,mannerPattern));\n\n    let racePattern = /Race (.*) Résistance/;\n    setProperty(newValues, \"data.bio.race\",extractData(expectedData,racePattern));\n\n    let attributePattern = /Précision ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.accurate.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Astuce ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.cunning.value\", parseInt(extractData(expectedData,attributePattern)));    \n    attributePattern = /Discrétion ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.discreet.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Persuasion ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.persuasive.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Agilité ([0-9]+).+\\)/;\n    setProperty(newValues, \"data.attributes.quick.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Volonté ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.resolute.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Force ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.strong.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Vigilance ([0-9]+)/;\n    setProperty(newValues, \"data.attributes.vigilant.value\", parseInt(extractData(expectedData,attributePattern)));\n\n    let shadowPattern = /Ombre (.*) \\(/;  \n    setProperty(newValues, \"data.bio.shadow\", extractData(expectedData,shadowPattern));\n    \n    // If nomatch == thouroughly corrupt\n    let corruptionPattern = /\\([Cc]orruption[ ]: ([0-9]+).?\\)/;\n    // console.log(\"Permanent Corruption[\"+extractData(expectedData,corruptionPattern)+\"]\");   \n    let corr = extractData(expectedData,corruptionPattern);\n    if( corr !== null && corr !== \"nomatch\" ) {\n        setProperty(newValues, \"data.health.corruption.permanent\", parseInt(extractData(expectedData,corruptionPattern))); \n    }\n    else {\n        let fullyCorruptedItem = game.items.filter(element => element.data.data.reference === \"thoroughlycorrupt\");\n        if(fullyCorruptedItem.length > 0 )\n        {\n            fullyCorruptedItem = duplicate(fullyCorruptedItem[0].data);\n            actorItems.push(fullyCorruptedItem);\n        }\n    }\n\n\n    let tacticsPattern = / [Tactique :|Tactiques :] (.*)/;\n    // console.log(\"Tactics[\"+extractData(expectedData,tacticsPattern)+\"]\");\n    setProperty(newValues, \"data.bio.tactics\", extractData(expectedData,tacticsPattern));\n\n    let actor = await Actor.create(newValues);\n\n    let abilitiesPattern = /Talents (.*) Armes /;\n    let singleAbilityPattern = /([^,^\\)]+?\\))?/g;\n    let abilityPattern = / ?([^\\(]+)\\((.+)\\)/;\n    let allAbilities = extractData(expectedData,abilitiesPattern);\n    let abilitilist = allAbilities.match(singleAbilityPattern);\n    // Normal abilities\n    // Medicus (master), \n    additionalInfo += await extractSpecialItems(actorItems, \"ability\", abilitilist, abilityPattern);\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, abilityPattern);\n    // Mystical Power\n    let singleMysticalPowerPattern = /[Pp]ouvoir [Mm]ystique \\(([^\\)]*)\\)/g;\n    abilitilist = allAbilities.match(singleMysticalPowerPattern);\n    let mysticalPowerPattern = /\\(([^,]+), (.*)\\)/\n    console.log(\"abilitylist[mp]:\"+JSON.stringify(abilitilist));\n    // Mystical Power (Bend Will, master)\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, mysticalPowerPattern);\n\n    // Mystical Power (Bend Will, master)\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, mysticalPowerPattern);\n\n    let traitsPattern = /Traits (.+) Agilité [0-9]/;\n    let traitstlist = extractData(expectedData,traitsPattern).match(singleAbilityPattern);\n    additionalInfo += await extractSpecialItems(actorItems, \"trait\", traitstlist, abilityPattern);\n\n    let updateObj = await actor.createEmbeddedDocuments(\"Item\", actorItems);\n    // console.log(\"updateObj \"+JSON.stringify(updateObj));\n    \n    let healMe = {_id:actor.id};\n    setProperty(healMe, \"data.health.toughness.value\", getProperty(actor, \"data.data.health.toughness.max\") );\n    await Actor.updateDocuments([healMe]);\n\n    let message = `${actor.name} a été créé.</br>${additionalInfo}`;\n    ChatMessage.create({\n        speaker: ChatMessage.getSpeaker({alias: \"Macro Importation de PNJ\"}),\n        whisper: [game.user],\n        content: message\n    });\n\n    actor.sheet.render(true);\n}",
      "flags": {
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298199744,
        "modifiedTime": 1717742549158,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.YCvOsXMPWHe5wDWR",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "1tloLWrKpvY8kzF0",
      "sort": 0,
      "_id": "BKtDyVWItnWeMobt"
    },
    {
      "name": "Perception",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/eye.svg",
      "scope": "global",
      "command": "main()\n\nasync function main(){\n    let selected = canvas.tokens.controlled;\n    if(selected.length > 1 || selected.length == 0){\n        ui.notifications.error(\"Sélectionnez votre token, et uniquement ce token\")\n        return;\n    }\n    let actor = selected[0].actor;\n\n    let targetData = {hasTarget : false};\n    const attribute = actor.data.data.attributes[\"vigilant\"];\n    let vigilantValue = attribute.value + actor.data.data.bonus[\"vigilant\"];\n    let subImg;\n    let attributeRoll = await new Roll(\"1d20\").evaluate();\n    let resultText;\n\n    let margin = vigilantValue - attributeRoll.total\n    if(attributeRoll.total <= vigilantValue){\n        resultText = actor.data.name + \" réussit avec une marge de +\" + margin.toString();\n        subImg = \"icons/sundries/lights/candle-lit-yellow.webp\";\n    }\n    else{\n        resultText = actor.data.name + \" échoue avec une marge de \" + margin.toString();\n        subImg = \"icons/commodities/treasure/token-white-skull.webp\";\n    }\n\n    let templateData = {\n        targetData : targetData,\n        hasTarget : false,\n        introText: \"Jet de Perception de \" + actor.data.name,\n        introImg: actor.data.img,\n        targetText: \"\",\n        subText:  `Vigilance : ${vigilantValue}`,\n        subImg: \"\",\n        hasRoll: false,\n        rollString: \"\",\n        rollResult : \"\",\n        resultText: resultText,\n        finalText: \"\"\n    };\n\n    const html = await renderTemplate(\"systems/symbaroum/template/chat/ability.html\", templateData);\n    const chatData = {\n        user: game.user._id,\n        content: html\n    }\n    attributeRoll.toMessage({ flavor: html}, {rollMode: \"blindroll\"})\n}",
      "flags": {
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298199744,
        "modifiedTime": 1717742549158,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.muqaE6sYg5EcC3ox",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "1tloLWrKpvY8kzF0",
      "sort": 0,
      "_id": "e7I64C3IaI0emKY7"
    }
  ],
  "cards": [],
  "playlists": [],
  "folders": [
    {
      "name": "FR - Macros",
      "type": "Macro",
      "folder": null,
      "description": "",
      "sorting": "a",
      "sort": 0,
      "color": null,
      "flags": {
        "core": {}
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1717742549171,
        "modifiedTime": 1717742549171,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Folder.1tloLWrKpvY8kzF0",
        "duplicateSource": null,
        "exportSource": null
      },
      "_id": "1tloLWrKpvY8kzF0"
    }
  ],
  "_id": "TySuqZj7oKvOoIfE",
  "flags": {},
  "_stats": {
    "systemId": "symbaroum",
    "systemVersion": "4.0.0",
    "coreVersion": "13.344",
    "createdTime": 1664298316275,
    "modifiedTime": 1717742755191,
    "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null
  },
  "folder": null,
  "_key": "!adventures!TySuqZj7oKvOoIfE"
}
