{
  "name": "Symbaroum Macros - Italian",
  "img": "systems/symbaroum/asset/image/cover-system-adv.webp",
  "caption": "",
  "sort": 0,
  "description": "<p>This contains useful macros in Italian. Note that there are additional Macros in the English one that you might want to use.</p>",
  "actors": [],
  "combats": [],
  "items": [],
  "journal": [],
  "scenes": [],
  "tables": [],
  "macros": [
    {
      "name": "PNG Importer",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/mystery-man.svg",
      "scope": "global",
      "command": "/**\n * Per usare questa macro copia dal manuale tutta la scheda del mostro\n * da nome fino alla fine della descrizione delle tattiche\n * \n * Nota: non verrà creata nessun arma\n * per il monster codex,inserisci a mano il nome, poi copia dall'atteggiamento fino alla fine.\n * Attenzione: le schede \"non dritte\" possono dar problemi, a seconda del tuo lettore pdf, potresti doverle inserire manualmente.\n * \n * Attenzione: Se hai piu oggetti che coincidono con il nome di poteri, abilità, ecc, potrebbero essere inseriti quelli.\n *  \n * controlla di aver importato tutti i poteri, abilità e tratti in Foundry.\n * \n */\n\n (()=>{\n    let dialog_content = `  \n    <div class=\"form-group\">\n      <label for=\"npctext\">Incolla i dati del PNG</label>\n      <input name=\"npctext\" type=\"text\">\n    </div>`;\n  \n    let x = new Dialog({\n      content : dialog_content,\n      buttons : \n      {\n        Ok : { label : `Ok`, callback : async (html)=> await extractAllData(html.find('[name=npctext]')[0].value.replace(/[\\r|\\n]/g, \"\"))},\n        Cancel : {label : `Annulla`}\n      }\n    });\n  \n    x.options.width = 200;\n    x.position.width = 200;\n  \n    x.render(true);\n  \n})();\n\nasync function extractSpecialItems(actorItems, type, abilitilist, abilityPattern)\n{\n    let message = \"\";\n    if( abilitilist !== null) {\n        await abilitilist.forEach(async element => { \n            let tmpdata = element.trim().match(abilityPattern);\n            console.log(\"tmpdata = \"+tmpdata);\n            if( tmpdata != null && tmpdata.length == 3)\n            {\n                let higherLevel = false;\n                let ability = game.items.filter(element => element.name.trim().toLowerCase() === tmpdata[1].trim().toLowerCase() && element.type === type);                \n                if(ability.length > 0 )\n                {\n                    // console.log(\"ability=\"+JSON.stringify(ability));\n\n                    ability = duplicate(ability[0].data);\n                    let abilityAction = \"\";\n\n                    // Master ability\n                    if(tmpdata[2] === \"Maestro\" || tmpdata[2] === \"III\") {                    \n                        higherLevel = true;\n                        setProperty(ability, \"data.master.isActive\",true);                                            \n                    }                \n                    abilityAction = getProperty(ability, \"data.master.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.master.action\", \"A\");\n                    }\n                    // Adept ability\n                    if(tmpdata[2] === \"Adepto\" || tmpdata[2] === \"II\" || higherLevel) {                \n                        higherLevel = true;\n                        setProperty(ability, \"data.adept.isActive\",true);                        \n\n                    }    \n                    abilityAction = getProperty(ability, \"data.adept.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.adept.action\", \"A\");\n                    }\n                    // Novice ability\n                    if(tmpdata[2] === \"Novizio\" || tmpdata[2] === \"I\" || higherLevel) {                              \n                        setProperty(ability, \"data.novice.isActive\",true);                        \n                    }\n                    abilityAction = getProperty(ability, \"data.novice.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.novice.action\", \"A\");\n                    }\n                    // console.log(\"Final ability \"+JSON.stringify(ability));\n                    console.log(\"Added ability \"+ability.name)\n                    actorItems.push(ability);\n                }\n                else if( type !== \"mysticalPower\" && type !== \"ability\" )\n                {\n                    message += `${element} non aggiunto ${type} - aggiungilo manualmente se necessario <br/>`;\n                }\n            }\n            else if( element.trim() !== \"\")\n            {\n                // message += `${element} not added - not found under Items - add manually <br/>`;\n                console.log(\"element[\"+element+\"] not found - add manually\");           \n            }\n        });\n\n    }    \n    return message;    \n}\n\nasync function extractAllData(npcData)\n{\n    let additionalInfo = \"\";\n\n    let extractData = function(inputData, inputPattern) {\n        let tmp = inputData.match(inputPattern);\n        if( tmp != null && tmp.length >= 2) {\n            // successful match\n            return tmp[1];\n        }\n        return \"nessuno\";\n    };\n    let expectedData = npcData.replace(/- /g,\"\");\n\n    let namePattern = /^(.+?) (Atteggiamento|Razza|Opposizione)/;\n    let newValues = {\n        name: extractData(expectedData,namePattern),\n        type: \"monster\",\n        folder: null,\n        sort: 12000,\n        data: {},\n        token: {},\n        items: [],\n        flags: {}        \n    }\n\n    let mannerPattern = /Atteggiamento(.*) Razza /;\n    setProperty(newValues, \"data.bio.manner\",extractData(expectedData,mannerPattern));\n    \n    let racePattern = /Razza (.*) Opposizione /;\n    setProperty(newValues, \"data.bio.race\",extractData(expectedData,racePattern));\n    \n    let attributePattern = /Astuzia ([0-9]+)/;\n    // console.log(\"Cunning[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.cunning.value\", parseInt(extractData(expectedData,attributePattern)));    \n    attributePattern = /Attenzione ([0-9]+)/;\n    // console.log(\"Vigilant[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.vigilant.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Furtività ([0-9]+)/;\n    // console.log(\"Discreet[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.discreet.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Persuasione ([0-9]+)/;\n    // console.log(\"Persuasive[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.persuasive.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Precisione ([0-9]+)/;\n    // console.log(\"Accurate[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.accurate.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Rapidità ([0-9]+).+\\)/;\n    // console.log(\"Quick[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.quick.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Tenacia ([0-9]+)/;\n    // console.log(\"Resolute[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.resolute.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Vigore ([0-9]+)/;\n    // console.log(\"Strong[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.strong.value\", parseInt(extractData(expectedData,attributePattern)));\n\n    let shadowPattern = /Ombra(.*) \\(/;\n    // console.log(\"Shadow[\"+extractData(expectedData,shadowPattern)+\"]\");    \n    setProperty(newValues, \"data.bio.shadow\", extractData(expectedData,shadowPattern));\n    \n    // If nomatch == thouroughly corrupt\n    let corruptionPattern = /\\(Corruzione: ([0-9]+).?\\)/;\n    // console.log(\"Permanent Corruption[\"+extractData(expectedData,corruptionPattern)+\"]\");   \n    let corr = extractData(expectedData,corruptionPattern);\n    if( corr !== null && corr !== \"nomatch\" ) {\n        setProperty(newValues, \"data.health.corruption.permanent\", parseInt(extractData(expectedData,corruptionPattern))); \n    }\n    \n    let tacticsPattern = / Tattiche: (.*)/;\n    // console.log(\"Tactics[\"+extractData(expectedData,tacticsPattern)+\"]\");\n    setProperty(newValues, \"data.bio.tactics\", extractData(expectedData,tacticsPattern));\n\n    let actor = await Actor.create(newValues);\n\n    let abilitiesPattern = /Abilità (.*) Armi /;\n    let singleAbilityPattern = /([^,^\\)]+?\\))?/g;\n    let abilityPattern = / ?([^\\(]+)\\((.+)\\)/;\n    let allAbilities = extractData(expectedData,abilitiesPattern);\n    console.log(\"allAbilities:\"+allAbilities);\n    let abilitilist = allAbilities.match(singleAbilityPattern);\n    let actorItems = [];\n    console.log(\"abilitylist:\"+abilitilist);\n\n    // Normal abilities\n    // Medicus (master), \n    additionalInfo += await extractSpecialItems(actorItems, \"ability\", abilitilist, abilityPattern);\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, abilityPattern);\n\n    // Mystical Power\n    // let mysticalPowerPattern = /Mystical [Pp]ower \\(([^,]+), ([^\\)]*)\\)/g;\n    //let singleMysticalPowerPattern = /Potere Mistico (([^,]))/g;  \n    let singleMysticalPowerPattern = /\\: ?([^\\)]+.)?/g; \n    abilitilist = allAbilities.match(singleMysticalPowerPattern);\n    let mysticalPowerPattern = /\\: ?([^\\)]+)\\((.*?)\\)/\n    console.log(\"abilitylist[mp]:\"+JSON.stringify(abilitilist));\n    // Mystical Power (Bend Will, master)\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, mysticalPowerPattern);\n\n    let traitsPattern = /Tratti (.+) Astuzia [0-9]/;\n    console.log(\"Traits[\"+extractData(expectedData,traitsPattern)+\"]\");\n    let traitstlist = extractData(expectedData,traitsPattern).match(singleAbilityPattern);\n    // console.log(\"traitslist =\"+JSON.stringify(traitstlist));\n    additionalInfo += await extractSpecialItems(actorItems, \"trait\", traitstlist, abilityPattern);\n\n    // console.log(\"actorItems:\"+JSON.stringify(actorItems));\n\n    let updateObj = await actor.createEmbeddedDocuments(\"Item\", actorItems);\n    // console.log(\"updateObj \"+JSON.stringify(updateObj));\n\n\n    let healMe = {_id:actor.id};\n    setProperty(healMe, \"data.health.toughness.value\", getProperty(actor, \"data.data.health.toughness.max\") );\n    await Actor.updateDocuments([healMe]);\n\n    let message = `Created ${actor.name}<br/>${additionalInfo}`;\n    ChatMessage.create({\n        speaker: ChatMessage.getSpeaker({alias: \"NPC Importer Macro\"}),\n        whisper: [game.user],\n        content: message\n    });\n\n}",
      "flags": {
        "furnace": {
          "runAsGM": false
        },
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296886774,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.rovDHjS4ZPvgmWZM",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "3cVTTmQ5p0Mr4qHT"
    },
    {
      "name": "Reset Corruzione Temporeanea",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/ice-aura.svg",
      "scope": "global",
      "command": "/** \n * La macro può sessere utilizzata selezionando dei token sullo schermo, se nessun token è selezionato, si possono selezionare i vari personaggi (default tutti)\n */\n (()=>{\n    let defaultCheck = \"checked\"; // set to unchecked\n    let actorslist = [];\n\n    if(canvas.tokens.controlled.length > 0) {\n        // If no actor selected\n        // Time to get busy\n        canvas.tokens.controlled.map(e => { \n            if(e.actor.data.type === \"player\") {\n                if(game.user.isGM || e.actor.owner)\n                    actorslist.push(e.actor);\n            }\n        });\n        if(actorslist.length > 0 ) \n        {\n            actorslist = [actorslist[0]];\n        }\n    } else {     \n        let gameacts = game.actors.filter(e => { if( (game.user.isGM || e.owner) && e.data.type === \"player\") { return e; } });\n        Array.prototype.push.apply(actorslist, gameacts);\n    }\n\n    let allKeys = \"\";\n    actorslist.forEach(t => {\n        allKeys = allKeys.concat(`<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"${t.data._id}\">${t.data.name}</label> </div>\n                <div><input id=\"${t.data._id}\" type=\"checkbox\" name=\"selection\" value=\"${t.data._id}\" ${defaultCheck}=\"${defaultCheck}\"></div>\n            </div>`);\n    });\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n    <h2>Seleziona i giocatori</h2>\n    ${allKeys}\n    <br />\n    </div>`;\n    let x = new Dialog({\n        title: \"Reset Corruption\",\n        content : dialog_content,\n        buttons : \n        {\n            Ok :{ label : `Ok`, callback : async (html) => {             \n                                            let tmp = html.find(\"input[name='selection']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});                                            \n                                            if(tmp.length == 0) {\n                                                ui.notifications.error(\"Need a valid number of players\");\n                                                return;\n                                            }\n                                            resetCorruption(tmp);\n                                        }\n                },\n            Cancel : {label : `Annulla`}\n        }\n    });\n    \n    x.options.width = 200;\n    x.position.width = 300;\n    \n    x.render(true);\n})();\n\nfunction resetCorruption(actorids)\n{\n    let actorNames = \"\";\n    let updates = actorids.map(a => {\n        let aexp = game.actors.get(a);\n    \n        actorNames = actorNames + \"<li>\" + aexp.name;\n\n        return {\n            _id: a,\n            \"data.health.corruption.temporary\": 0\n        };\n    });\n    \n    Actor.updateDocuments(updates);\n    let chatOptions = {\n        rollMode: game.settings.get('core', 'rollMode'),        \n        content: `<h2>La corruzione temporanea è passata</h2> \n                    I personaggi:<ul> ${actorNames}</ul> hanno ora 0 di corruzione temporanea`\n    };\n    ChatMessage.create(chatOptions);\n    // ui.notifications.info(`Added ${exp} experience to checked (${actorNames}) characters`);\n}",
      "flags": {
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296886773,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.rfxvvcoQfLNQNd4L",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "EjS1wCzPziyih3In"
    },
    {
      "name": "Tira l'attributo",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/dice-target.svg",
      "scope": "global",
      "command": "(()=>{\n    let defaultCheck = \"unchecked\"; // set to unchecked\n    let actorslist = [];\n\n    if(canvas.tokens.controlled.length > 0) {\n        // If no actor selected\n        // Time to get busy\n        canvas.tokens.controlled.map(e => { \n            if(e.actor.data.type === \"player\") {\n                if(game.user.isGM || e.actor.owner)\n                    actorslist.push(e.actor);\n            }\n        });\n        if(actorslist.length > 0 ) { actorslist = [actorslist[0]]; }\n        // check if there are tokens on the map, if so, use their actors\n        // if there are no controlled tokens on the map, select all players in the actor catalogue\n    } else {     \n        let gameacts = game.actors.filter(e => { if( (game.user.isGM || e.owner) && e.data.type === \"player\") { return e; } });\n        Array.prototype.push.apply(actorslist, gameacts);\n    }\n\n    if(actorslist.length === 0) {\n        ui.notifications.info(`No actor available for you to do an attribute test`);\n        return;\n    } else if(actorslist.length === 1) {\n        defaultCheck = \"checked\";\n    }\n\n    let allActors = \"\";\n    actorslist.forEach(t => {\n        allActors = allActors.concat(`<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"${t.data._id}\">${t.data.name}</label> </div>\n                <div><input id=\"${t.data._id}\" type=\"radio\" name=\"selection\" value=\"${t.data._id}\" ${defaultCheck}=\"${defaultCheck}\"></div>\n            </div>`);\n    });\n    \n    let keys = Object.keys(actorslist[0].data.data.attributes);\n    let allKeys = \"\";\n    keys.forEach(t => {\n        allKeys = allKeys.concat(`<option value=\"${t}\">${game.i18n.localize(actorslist[0].data.data.attributes[t].label)}`);\n    });\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n    <h2>Seleziona i giocatori</h2>\n    ${allActors}\n    <br />\n    <div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n    <div style=\"width:10em;min-width:10em;\"><label for=\"attribute\" style=\"min-width:10em\">${game.i18n.localize(\"DIALOG.ATTRIBUTE\")}</label> </div>\n    <div style=\"width:10em;min-width:10em;\"><select id=\"attribute\" name=\"category\">${allKeys}</select></div>\n    </div><br/>\n    </div>`;\n\n    let x = new Dialog({\n        content : dialog_content,\n        alternatives: keys,\n        buttons : \n        {\n        Ok : { label : `Ok`, callback : async (html)=> {\n                let tmp = html.find(\"input[name='selection']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});\n                await rollAttribute(tmp, html.find('#attribute')[0].value);\n            }\n        },\n        Cancel : {label : `Annulla`}\n        }\n    });\n    \n    x.options.width = 200;\n    x.position.width = 300;\n    \n    x.render(true);\n})();\n\nasync function rollAttribute(actorids, attribute)\n{\n    let updates = actorids.map(a => {\n        let aexp = game.actors.get(a);\n        aexp.rollAttribute(attribute, null, null);\n    });\n}",
      "flags": {
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296886773,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.jqlw2EhoIe8KhTuu",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "IQx49XlZbQ8q1pJ1"
    },
    {
      "name": "Aggiungi Exp",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/upgrade.svg",
      "scope": "global",
      "command": "/** \n * La macro può sessere utilizzata selezionando dei token sullo schermo, se nessun token è selezionato, si possono selezionare i vari personaggi (default tutti)\n * \n */\n (()=>{\n    let defaultCheck = \"checked\"; // set to unchecked\n    let actorslist = [];\n\n    if(canvas.tokens.controlled.length > 0) {\n        // If no actor selected\n        // Time to get busy\n        canvas.tokens.controlled.map(e => { \n            if(e.actor.data.type === \"player\") {\n                if(game.user.isGM || e.actor.owner)\n                    actorslist.push(e.actor);\n            }\n        });\n        if(actorslist.length > 0 ) \n        {\n            actorslist = [actorslist[0]];\n        }\n    } else {     \n        let gameacts = game.actors.filter(e => { if( (game.user.isGM || e.owner) && e.data.type === \"player\") { return e; } });\n        Array.prototype.push.apply(actorslist, gameacts);\n    }\n\n    let allKeys = \"\";\n    actorslist.forEach(t => {\n        allKeys = allKeys.concat(`<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"${t.data._id}\">${t.data.name}</label> </div>\n                <div><input id=\"${t.data._id}\" type=\"checkbox\" name=\"selection\" value=\"${t.data._id}\" ${defaultCheck}=\"${defaultCheck}\"></div>\n            </div>`);\n    });\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n    <h2>Seleziona i personaggi</h2>\n    ${allKeys}\n    <br />\n    <div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"experience\" style=\"width:10em;min-width:10em\">Esperienza</label></div><div><input type=\"text\" name=\"experience\" style=\"width:5em\"></div>\n    </div>\n    <br/>\n    </div>`;\n    let x = new Dialog({\n        title: \"Aggiungi Esperienza\",\n        content : dialog_content,\n        buttons : \n        {\n            Ok :{ label : `Ok`, callback : async (html) => {             \n                                            let tmp = html.find(\"input[name='selection']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});\n                                            let exp = parseInt(html.find(\"input[name='experience'\")[0].value);\n                                            if(isNaN(exp) || tmp.length == 0) {\n                                                ui.notifications.error(\"Serve un numero valido di esperienza, sia positivo che negativo\");\n                                                return;\n                                            }\n                                            addExperience(tmp,exp);\n                                        }\n                },\n            Cancel : {label : `Annulla`}\n        }\n    });\n    \n    x.options.width = 200;\n    x.position.width = 300;\n    \n    x.render(true);\n})();\n\nfunction addExperience(actorids, exp)\n{\n    let actorNames = \"\";\n    let updates = actorids.map(a => {\n        let aexp = game.actors.get(a);\n    \n        actorNames = actorNames + \"<li>\" + aexp.name;\n\n        return {\n            _id: a,\n            \"data.experience.total\": aexp.data.data.experience.total + exp\n        };\n    });\n    \n    Actor.update(updates);\n    let chatOptions = {\n        rollMode: game.settings.get('core', 'rollMode'),        \n        content: `<h2>Assegnazione esperienza</h2> \n                    I Personaggi:<ul> ${actorNames}</ul> hanno ricevuto ${exp} punti esperienza`\n    };\n    ChatMessage.create(chatOptions);\n    // ui.notifications.info(`Added ${exp} experience to checked (${actorNames}) characters`);\n}",
      "flags": {
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296886773,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.Ib9lVNzgBhxjP5EZ",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "SDazkBteGT8X0SaY"
    },
    {
      "name": "Paga per ritirare",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/d20-grey.svg",
      "scope": "global",
      "command": "/** \n * Macro paga per ritirare. \n *\n La macro può sessere utilizzata selezionando dei token sullo schermo, se nessun token è selezionato, si possono selezionare i vari personaggi (default tutti)\n * \n */\n (()=>{\n    let defaultCheck = \"unchecked\"; // set to unchecked\n    let bithirsGame = true; // It is not a bithir world unless this is set\n    let actorslist = [];\n\n    if(canvas.tokens.controlled.length > 0) {\n        // If no actor selected\n        // Time to get busy\n        canvas.tokens.controlled.map(e => { \n            if(e.actor.data.type === \"player\") {\n                if(game.user.isGM || e.actor.owner)\n                    actorslist.push(e.actor);\n            }\n        });\n        if(actorslist.length > 0 ) { actorslist = [actorslist[0]]; }\n        // check if there are tokens on the map, if so, use their actors\n        // if there are no controlled tokens on the map, select all players in the actor catalogue\n    } else {     \n        let gameacts = game.actors.filter(e => { if( (game.user.isGM || e.owner) && e.data.type === \"player\") { return e; } });\n        Array.prototype.push.apply(actorslist, gameacts);\n    }\n    \n\n    if(actorslist.length === 0) {\n        ui.notifications.info(`No actor available for you to apply re-roll cost`);\n        return;\n    } else if(actorslist.length === 1) {\n        defaultCheck = \"checked\";\n    }    \n\n    let allKeys = \"\";\n    actorslist.forEach(t => {\n        allKeys = allKeys.concat(`<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"${t.data._id}\">${t.data.name}</label> </div>\n                <div><input id=\"${t.data._id}\" type=\"radio\" name=\"selection\" value=\"${t.data._id}\" ${defaultCheck}=\"${defaultCheck}\"></div>\n            </div>`);\n    });\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n    <h2>Seleziona i giocatori</h2>\n    ${allKeys}\n    <br />\n    <div>Seleziona cosa pagare per ritirare</div>\n    <div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n        <div style=\"width:10em;min-width:10em;\"><label for=\"artifactrr\">Esperienza</label> </div>\n        <div><input type=\"radio\" id=\"artifactrr\" value=\"artifactrr\" name=\"costType\"></div>\n    </div>\n    <div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n        <div style=\"width:10em;min-width:10em;\"><label for=\"permanent\">Corruzione (perm)</label></div>\n        <div><input type=\"radio\" id=\"permanent\" value=\"permanent\" name=\"costType\"></div>\n    </div>`;\n    if(bithirsGame) {\n        dialog_content = dialog_content + `<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n        <div style=\"width:10em;min-width:10em;\"><label for=\"permanent\">Corruzione (giornaliera)</label></div>\n        <div><input type=\"radio\" id=\"longterm\" value=\"longterm\" name=\"costType\"></div>\n        </div>`;\n    }\n    dialog_content += `<br /></div>`;\n    let x = new Dialog({\n        title: \"Take cost for re-roll\",\n        content : dialog_content,\n        buttons : \n        {\n            Ok :{ label : `Ok`, callback : async (html) => {             \n                                            let tmp = html.find(\"input[name='selection']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});\n                                            let costType = html.find(\"input[name='costType']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});\n\n                                            await payCost(tmp,costType);\n                                        }\n                },\n            Cancel : {label : `Annulla`}\n        }\n    });\n    \n    x.options.width = 200;\n    x.position.width = 300;\n    \n    x.render(true);\n})();\n\nasync function payCost(actorids, costType)\n{\n    let aexp = null;\n    let actorName = \"\";\n    \n    let message_content = \"\";\n    let dice = new Roll(\"1d4\");\n    dice.roll();\n\n    let updates = actorids.map(a => {\n        aexp = game.actors.get(a);\n        actorName = aexp.name;        \n        return {\n            _id: a,\n            \"data.experience.artifactrr\": aexp.data.data.experience.artifactrr + ( costType.includes(\"artifactrr\")? 1:0),\n            \"data.health.corruption.permanent\": aexp.data.data.health.corruption.permanent + ( costType.includes(\"permanent\")? 1:0),\n            \"data.health.corruption.longterm\": aexp.data.data.health.corruption.longterm + ( costType.includes(\"longterm\")? dice.total:0)\n        };\n    });\n    console.log(updates);\n    let chatOptions = {\n        speaker: {\n\t\t\tactor: aexp._id\n\t    },\n        rollMode: game.settings.get(\"core\", \"rollMode\")\n     };\n\n    // \n    if( costType.includes(\"longterm\") ) {\n        /** Only applicable for Bithir game */\n        chatOptions[\"type\"] = CHAT_MESSAGE_TYPES.ROLL;\n        chatOptions[\"content\"] = `<h2>Re-roll for daily corruption</h2> \n            ${actorName} paid ${dice.total} daily corruption for a re-roll`;        \n        chatOptions[\"roll\"] = dice;\n    } else {\n        chatOptions[\"content\"] = `<h2>Re-roll for ${ costType.includes(\"artifactrr\") ? \"experience\":\"permanent corruption\" }</h2>\n            ${actorName} paid 1 ${ costType.includes(\"artifactrr\") ? \"experience\":\"permanent corruption\" } for a re-roll`\n        \n    }\n    ChatMessage.create(chatOptions);     \n    await Actor.update(updates);\n    \n    // Post results\n}",
      "flags": {
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296886772,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.ZOmWDVLXwLd9aT1L",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "VSf3tGNqV5YJfdeN"
    },
    {
      "name": "Generatore Di Nomi",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/hanging-sign.svg",
      "scope": "global",
      "command": "let allNames = {\n    \"ambiano-femmina\":[[\"A\",\"Abe\",\"Ad\",\"Ag\",\"Aj\",\"Al\",\"Ales\",\"Ali\",\"Almer\",\"Am\",\"An\",\"Apo\",\"Ar\",\"Asm\",\"Ay\",\"Ba\",\"Be\",\"Bel\",\"Da\",\"De\",\"Del\",\"Desi\",\"Di\",\"Dis\",\"Do\",\"Du\",\"E\",\"El\",\"Eli\",\"Elio\",\"Em\",\"Er\",\"Es\",\"Eu\",\"Eve\",\"Ever\",\"Fe\",\"Fren\",\"Gar\",\"Ge\",\"Gen\",\"Gin\",\"Go\",\"Ha\",\"He\",\"Her\",\"Hu\",\"Hul\",\"Hur\",\"Id\",\"Il\",\"io\",\"Ir\",\"Is\",\"Je\",\"Ju\",\"Ka\",\"Kah\",\"Kar\",\"Kol\",\"Kor\",\"Kral\",\"Ky\",\"La\",\"Las\",\"Lav\",\"Le\",\"Les\",\"Levi\",\"Li\",\"Lin\",\"Lo\",\"Lore\",\"Losa\",\"Lu\",\"Lup\",\"Ly\",\"Lyr\",\"Lys\",\"Ma\",\"Mal\",\"Mar\",\"Me\",\"Mel\",\"Mer\",\"Mi\",\"Mo\",\"Mo\",\"Mor\",\"Myr\",\"Nad\",\"Ne\",\"Nefer\",\"Nod\",\"Ob\",\"Od\",\"Of\",\"Or\",\"Ot\",\"Ou\",\"Pe\",\"Per\",\"Pet\",\"Pur\",\"Rab\",\"Rev\",\"Ri\",\"Ro\",\"Sa\",\"Saf\",\"Sal\",\"Sam\",\"Sef\",\"Sel\",\"Sen\",\"Ser\",\"Si\",\"So\",\"Sol\",\"Sur\",\"Ta\",\"Tan\",\"Te\",\"Tel\",\"Ter\",\"Tin\",\"Tob\",\"Tor\",\"Tred\",\"Tul\",\"U\",\"Ul\",\"Val\",\"Van\",\"Var\",\"Vem\",\"Vol\",\"Ni\" ], [\"a\",\"abela\",\"abelora\",\"adea\",\"adena\",\"afera\",\"afia\",\"agina\",\"agra\",\"ala\",\"alia\",\"alna\",\"ama\",\"ana\",\"veta\",\"anda\",\"andra\",\"anitra\",\"anja\",\"area\",\"aria\",\"ata\",\"athara\",\"bela\",\"belora\",\"betha\",\"da\",\"dara\",\"darea\",\"dea\",\"dela\",\"delia\",\"dera\",\"detta\",\"dindra\",\"disa\",\"dla\",\"dola\",\"dora\",\"dorna\",\"dra\",\"drona\",\"eana\",\"earia\",\"edra\",\"eia\",\"ela\",\"elda\",\"elea\",\"elia\",\"ella\",\"elya\",\"ema\",\"ena\",\"endra\",\"enia\",\"enora\",\"era\",\"erda\",\"esla\",\"esma\",\"eva\",\"evia\",\"feia\",\"ferena\",\"fia\",\"frynda\",\"ga\",\"ganda\",\"gha\",\"gida\",\"gusta\",\"hara\",\"helda\",\"ia\",\"ida\",\"idna\",\"iela\",\"ilia\",\"ima\",\"ina\",\"indra\",\"inora\",\"inthia\",\"iol\",\"ira\",\"ka\",\"kresia\",\"la\",\"lalia\",\"lara\",\"lea\",\"lega\",\"lena\",\"lia\",\"lida\",\"lina\",\"linda\",\"line\",\"loena\",\"lona\",\"lusa\",\"ma\",\"manda\",\"mara\",\"mea\",\"melia\",\"mendra\",\"munda\",\"na\",\"nara\",\"nia\",\"nid\",\"nora\",\"oaleta\",\"oena\",\"ola\",\"olia\",\"ona\",\"ora\",\"oya\",\"ria\",\"rona\",\"sa\",\"sana\",\"seba\",\"séfia\",\"sina\",\"stra\",\"suma\",\"thena\",\"tia\",\"tina\",\"tulda\",\"va\",\"vana\",\"vea\",\"via\",\"yela\",\"yola\" ] ],\n    \"ambriano-femmina\":[[ \"Abra\",\"Ad\",\"Ag\",\"Al\",\"Als\",\"An\",\"Ar\",\"As\",\"Au\",\"Az\",\"Bal\",\"Bar\",\"Bau\",\"Be\",\"Ber\",\"Bur\",\"Cor\",\"Da\",\"Dag\",\"Dar\",\"De\",\"Deg\",\"Dek\",\"Del\",\"Do\",\"Dor\",\"Eb\",\"Ed\",\"Ef\",\"Eg\",\"El\",\"Em\",\"En\",\"Er\",\"Eu\",\"Far\",\"Far\",\"Fe\",\"Fer\",\"Fre\",\"Gad\",\"Gal\",\"Gel\",\"Gon\",\"Gor\",\"Gra\",\"Gre\",\"Gren\",\"Gro\",\"Gun\",\"Har\",\"Has\",\"Hen\",\"Her\",\"Hu\",\"Ia\",\"Iar\",\"Ias\",\"Id\",\"Il\",\"Is\",\"Ja\",\"jeu\",\"Jo\",\"Jor\",\"Ju\",\"Jur\",\"Ka\",\"Kag\",\"Kar\",\"Kas\",\"Kat\",\"Ke\",\"Ker\",\"Kla\",\"Kor\",\"Kur\",\"La\",\"Lar\",\"Las\",\"Le\",\"Leo\",\"Lug\",\"Ma\",\"Ma\",\"Mal\",\"Man\",\"Mar\",\"Mer\",\"Mog\",\"Mor\",\"Mul\",\"Na\",\"Ne\",\"Nei\",\"Ni\",\"Nor\",\"Od\",\"Og\",\"Ol\",\"Om\",\"On\",\"Or\",\"Pe\",\"Pel\",\"Pen\",\"Per\",\"Prio\",\"Ra\",\"Rad\",\"Ran\",\"Ri\",\"Sa\",\"San\",\"Sar\",\"Se\",\"Sel\",\"Ser\",\"Ses\",\"Si\",\"Ska\",\"Son\",\"Ta\",\"Tal\",\"Teo\",\"Ton\",\"Tor\",\"Tul\",\"Tur\",\"U\",\"Un\",\"Val\",\"Ven\",\"Vol\",\"Yn\"],[\"adir\",\"ado\",\"agai\",\"ai\",\"akai\",\"akleo\",\"aklon\",\"ako\",\"al\",\"aldo\",\"alg\",\"alo\",\"alon\",\"am\",\"amedo\",\"amei\",\"amo\",\"an\",\"andan\",\"ander\",\"ando\",\"andro\",\"angoi\",\"ani\",\"antro\",\"aon\",\"ario\",\"aros\",\"ask\",\"asto\",\"baios\",\"balmer\",\"bardo\",\"beo\",\"berdo\",\"bian\",\"bio\",\"cai\",\"dag\",\"dai\",\"dam\",\"damei\",\"dar\",\"daro\",\"das\",\"del\",\"der\",\"dered\",\"din\",\"dir\",\"do\",\"dol\",\"donio\",\"doro\",\"dramos\",\"dro\",\"dros\",\"eago\",\"ean\",\"eas\",\"edar\",\"edo\",\"egat\",\"ego\",\"ek\",\"elgoi\",\"elo\",\"eno\",\"eo\",\"eon\",\"eono\",\"erio\",\"ero\",\"eron\",\"ertos\",\"esoro\",\"esto\",\"eto\",\"ex\",\"fald\",\"falt\",\"fan\",\"fas\",\"feno\",\"fer\",\"foldo\",\"gai\",\"gal\",\"gald\",\"galm\",\"galo\",\"gando\",\"gasto\",\"gat\",\"gaton\",\"gel\",\"gero\",\"gio\",\"go\",\"goboi\",\"goi\",\"gomo\",\"gon\",\"gor\",\"gurst\",\"hal\",\"ian\",\"iano\",\"ieno\",\"il\",\"io\",\"ion\",\"iro\",\"kad\",\"kali\",\"kander\",\"kandro\",\"kanor\",\"kantor\",\"kel\",\"ker\",\"kered\",\"kerio\",\"kilo\",\"kobo\",\"komo\",\"laber\",\"lago\",\"lamei\",\"lando\",\"lani\",\"las\",\"leo\",\"ler\",\"lianos\",\"lio\",\"lios\",\"liostro\",\"loan\",\"logoi\",\"lomei\",\"lon\",\"los\",\"ludo\",\"magast\",\"mando\",\"mandro\",\"mar\",\"med\",\"medo\",\"mei\",\"melin\",\"melio\",\"melo\",\"men\",\"mendo\",\"menos\",\"meo\",\"metro\",\"milo\",\"milos\",\"nan\",\"nander\",\"nas\",\"nego\",\"nelio\",\"niam\",\"nio\",\"non\",\"nos\",\"o\",\"ogai\",\"ogoi\",\"oi\",\"okles\",\"olai\",\"old\",\"oldo\",\"on\",\"or\",\"os\",\"pano\",\"par\",\"pelo\",\"rafin\",\"rag\",\"ral\",\"ram\",\"ramai\",\"ramei\",\"ran\",\"rek\",\"relin\",\"remo\",\"rian\",\"ro\",\"ryn\",\"sander\",\"sel\",\"selg\",\"selm\",\"so\",\"so\",\"stak\",\"tan\",\"tar\",\"tel\",\"tho\",\"thos\",\"to\",\"to\",\"tolom\",\"torio\",\"tos\",\"tri\",\"under\",\"undi\",\"val\",\"valom\",\"vano\",\"vean\",\"vello\",\"vido\"] ],\n    \"ambriano-nobile\":[[\"_\",\"_\",\"_\",\"_\",\"_\",\"Ar\",\"Arg\",\"Br\",\"D\",\"Der\",\"Dr\",\"El\",\"Eld\",\"Els\",\"Elv\",\"Er\",\"F\",\"G\",\"Gal\",\"Gar\",\"Gor\",\"Gr\",\"H\",\"Hal\",\"Har\",\"Her\",\"Hol\",\"Hur\",\"K\",\"L\",\"Lor\",\"M\",\"Mar\",\"Mir\",\"Mor\",\"N\",\"Or\",\"P\",\"R\",\"S\",\"Sal\",\"St\",\"T\",\"V\",\"J\"],[\"a\",\"a\",\"a\",\"ao\",\"e\",\"e\",\"e\",\"ea\",\"eo\",\"i\",\"ia\",\"Ie\",\"io\",\"o\",\"o\",\"ou\",\"u\"],[\"b\",\"b\",\"d\",\"d\",\"f\",\"g\",\"k\",\"l\",\"l\",\"ld\",\"lf\",\"lg\",\"m\",\"n\",\"nd\",\"ng\",\"nl\",\"p\",\"r\",\"r\",\"rc\",\"rd\",\"rf\",\"rg\",\"rk\",\"rl\",\"rn\",\"rr\",\"rt\",\"s\",\"t\",\"th\",\"tt\"],[\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"e\",\"e\",\"e\",\"e\",\"e\",\"ei\",\"eia\",\"eo\",\"i\",\"ia\",\"io\",\"o\",\"o\",\"o\",\"o\",\"o\",\"ou\",\"u\",\"y\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"g\",\"j\",\"k\",\"k\",\"l\",\"l\",\"le\",\"ll\",\"n\",\"n\",\"r\",\"r\",\"ren\",\"rn\",\"s\",\"s\",\"s\",\"st\",\"t\",\"v\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"en\",\"o\",\"ar\",\"e\"]],\n    \"barbaro-femmina\":[[\"Ag\",\"Al\",\"Ar\",\"Ay\",\"Ba\",\"Ber\",\"Bo\",\"Bra\",\"Dan\",\"De\",\"Dea\",\"Ea\",\"Eb\",\"Efer\",\"El\",\"Era\",\"Fat\",\"Ful\",\"Gam\",\"Gor\",\"Hel\",\"In\",\"Kar\",\"Kat\",\"Kath\",\"Katran\",\"Klar\",\"Lob\",\"Mak\",\"Mar\",\"Mat\",\"Mir\",\"Mol\",\"Mon\",\"Mor\",\"Ob\",\"Or\",\"Ra\",\"Se\",\"Ser\",\"Sun\",\"Ter\",\"Tha\",\"Tir\",\"Un\",\"Va\",\"Vai\",\"Ver\",\"Vik\",\"Ya\",\"Ya\",\"Yag\",\"Yah\",\"Yg\"],[\"a\",\"aba\",\"abel\",\"agba\",\"agona\",\"ala\",\"alba\",\"alga\",\"ama\",\"ana\",\"asa\",\"aya\",\"ba\",\"baga\",\"da\",\"dala\",\"dana\",\"dorna\",\"ea\",\"ela\",\"elba\",\"elba\",\"ema\",\"ena\",\"fa\",\"gara\",\"gaya\",\"idja\",\"ima\",\"ina\",\"ionor\",\"ma\",\"na\",\"na\",\"nata\",\"neia\",\"neya\",\"nia\",\"oaleta\",\"ona\",\"onya\",\"ra\",\"raga\",\"rama\",\"rana\",\"shela\",\"suma\",\"ulda\",\"vana\",\"voba\",\"rona\",\"lea\",\"esma\",\"dama\"]],\n    \"barbaro-maschio\":[[\"Ag\",\"Al\",\"Am\",\"An\",\"Ar\",\"Ash\",\"Av\",\"Bag\",\"Bah\",\"Ban\",\"Barr\",\"Bel\",\"Ber\",\"Bir\",\"Bo\",\"Dar\",\"Did\",\"Dor\",\"Dorm\",\"Emb\",\"Erg\",\"Fa\",\"Far\",\"Gad\",\"Gal\",\"Gar\",\"Gir\",\"Gol\",\"Goth\",\"Gron\",\"Hab\",\"Hal\",\"Hel\",\"Ho\",\"Hohax\",\"Hub\",\"Iah\",\"In\",\"Jon\",\"Jor\",\"Ka\",\"Kar\",\"Kath\",\"Kod\",\"Kum\",\"Kur\",\"Kva\",\"Leo\",\"Lobaya\",\"Loth\",\"Lu\",\"Maiestic\",\"Mal\",\"Man\",\"Mar\",\"Meo\",\"Mo\",\"Mon\",\"Mor\",\"Nog\",\"Od\",\"Odal\",\"Ok\",\"Om\",\"Or\",\"Ov\",\"Par\",\"Rabai\",\"Rag\",\"Ran\",\"Razame\",\"Ro\",\"Sa\",\"Ser\",\"Seyer\",\"Soa\",\"Sot\",\"Tha\",\"The\",\"Tor\",\"Un\",\"Val\",\"Vik\",\"Vog\",\"Yag\",\"Yak\",\"Yar\",\"Ye\",\"Yg\",\"Yo\",\"Zol\"],[\"abag\",\"adan\",\"afin\",\"agar\",\"agor\",\"akal\",\"al\",\"alarog\",\"alem\",\"aman\",\"amar\",\"ambar\",\"amon\",\"an\",\"anmaar\",\"anred\",\"ar\",\"arathar\",\"ark\",\"aroan\",\"ast\",\"astor\",\"athve\",\"ax\",\"bagar\",\"bal\",\"ban\",\"bar\",\"bor\",\"busal\",\"dag\",\"dal\",\"dan\",\"dar\",\"del\",\"di\",\"do\",\"dok\",\"drun\",\"eb\",\"edon\",\"egor\",\"el\",\"embar\",\"eor\",\"ergor\",\"ersind\",\"faru\",\"fer\",\"gar\",\"glio\",\"gril\",\"har\",\"hax\",\"herg\",\"hor\",\"iabar\",\"ind\",\"iod\",\"kan\",\"kor\",\"laban\",\"lamar\",\"lem\",\"loar\",\"lobai\",\"maar\",\"man\",\"mar\",\"mer\",\"mergor\",\"nod\",\"nomer\",\"oban\",\"obor\",\"odan\",\"odar\",\"oel\",\"ofal\",\"okrag\",\"olas\",\"omar\",\"omer\",\"onar\",\"ondo\",\"orek\",\"orman\",\"orog\",\"oun\",\"ovar\",\"raban\",\"radeon\",\"ramal\",\"ramer\",\"ramon\",\"rek\",\"rel\",\"roan\",\"roun\",\"ska\",\"tar\",\"tas\",\"thar\",\"thor\",\"trod\",\"ulfu\",\"uma\",\"un\",\"usk\",\"val\",\"valg\",\"van\",\"var\",\"vosin\"]],\n    \"symbaroumn\":[[\"Ag\",\"Alm\",\"Alr\",\"And\",\"Ar\",\"Arv\",\"Clor\",\"D\",\"E\",\"Ear\",\"El\",\"Eor\",\"Fel\",\"G\",\"Gr\",\"H\",\"I\",\"Ir\",\"K\",\"Ks\",\"L\",\"M\",\"Men\",\"Mer\",\"Na\",\"Om\",\"Ser\",\"V\",\"X\",\"Y\",\"S\"],[\"_\",\"ab\",\"al\",\"ala\",\"am\",\"an\",\"and\",\"anth\",\"ar\",\"ar\",\"as\",\"asm\",\"eb\",\"ek\",\"el\",\"em\",\"erb\",\"esp\",\"ial\",\"iar\",\"id\",\"oder\",\"oh\",\"om\",\"or\",\"orv\",\"oum\",\"ur\",\"ymb\",\"ior\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"ad\",\"ag\",\"al\",\"am\",\"an\",\"ar\",\"ath\",\"av\",\"ed\",\"er\",\"fin\",\"i\",\"ia\",\"ian\",\"kha\",\"kun\",\"mi\",\"na\",\"o\",\"on\",\"or\",\"oum\",\"ra\",\"iol\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"-Ald\",\"-Eth\",\"-Han\",\"-Lo\",\"ag\",\"an\",\"ana\",\"do\",\"fu\",\"Na\",\"on\",\"ra\",\"ra\",\"-Yah\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\" Apak\",\" Ilak\",\" Sopak\",\"an\",\"ikel\",\"urel\",\"an\"]],\n    \"umanorapito-femmina\":[[\"An\",\"Al\",\"Ar\",\"Ba\",\"Bé\",\"E\",\"El\",\"En\",\"Er\",\"Fa\",\"Fé\",\"Fi\",\"Il\",\"Im\",\"In\",\"Is\",\"Lo\",\"U\",\"Ul\",\"Um\",\"Un\",\"Vi\",\"Vim\",\"Vin\",\"Vir\",\"Mi\",\"Ma\",\"Na\",\"Sa\",\"Si\",\"Em\"],[\"a\",\"ba\",\"da\",\"di\",\"ga\",\"ha\",\"hi\",\"ial\",\"id\",\"il\",\"ji\",\"ma\",\"mi\",\"na\",\"nam\",\"ra\",\"ri\",\"ama\",\"al\",\"fa\",\"fi\",\"ja\",\"la\",\"li\",\"sa\",\"si\",\"ta\",\"ti\",\"va\",\"vi\"]],\n    \"umanorapito-maschio\":[[\"A\",\"Aw\",\"B\",\"Ba\",\"D\",\"Dal\",\"Er\",\"F\",\"Ga\",\"Gu\",\"H\",\"I\",\"J\",\"Jar\",\"Jir\",\"K\",\"Ka\",\"Kel\",\"Lo\",\"Ma\",\"Na\",\"Ol\",\"Om\",\"Or\",\"R\",\"Rah\",\"S\",\"Sah\",\"T\",\"Th\",\"Ym\"],[\"_\",\"ael\",\"al\",\"ald\",\"am\",\"an\",\"ao\",\"ar\",\"ay\",\"éan\",\"el\",\"em\",\"en\",\"éo\",\"eon\",\"er\",\"ey\",\"ial\",\"iel\",\"im\",\"in\",\"io\",\"iol\",\"ir\",\"oan\",\"oel\",\"om\",\"on\",\"or\",\"yk\",\"ys\"]],\n    \"nano-nome\":[[\"A\",\"Al\",\"Ar\",\"Bel\",\"Ber\",\"Bol\",\"Bra\",\"Do\",\"Dol\",\"Dra\",\"Dro\",\"Du\",\"Ekade\",\"Is\",\"Ja\",\"Jo\",\"Jou\",\"Ka\",\"Kar\",\"Ker\",\"Ki\",\"Ko\",\"Kor\",\"Kou\",\"Ku\",\"La\",\"Li\",\"Lo\",\"Lou\",\"Lu\",\"Ma\",\"Mag\",\"Mal\",\"Mar\",\"Mi\",\"Mig\",\"Mir\",\"Mo\",\"Mog\",\"Mou\",\"Mu\",\"Mur\",\"O\",\"Ok\",\"Ol\",\"Ou\",\"Ouk\",\"Our\",\"Pie\",\"Ra\",\"Rad\",\"Ri\",\"Ro\",\"Rod\",\"Ru\",\"Rud\",\"Ska\",\"Sko\",\"Sta\",\"Sto\",\"Ta\",\"Tar\",\"Ter\",\"To\",\"Tok\",\"Tor\",\"Tru\",\"Tu\",\"Val\",\"Van\",\"Ves\",\"Vla\",\"Vla\",\"Vlo\",\"Vol\",\"Von\",\"Vul\",\"Vun\",\"Ya\",\"Za\",\"Zal\",\"Zar\",\"Zi\",\"Zil\",\"Zo\",\"Zol\",\"Zor\",\"Zu\",\"Zul\",\"Zur\"],[\"bald\",\"abel\",\"azor\",\"ban\",\"barn\",\"baz\",\"bek\",\"ber\",\"bold\",\"bon\",\"bor\",\"born\",\"brak\",\"bril\",\"brok\",\"bruk\",\"buld\",\"bun\",\"bur\",\"dan\",\"dar\",\"don\",\"dor\",\"dum\",\"dur\",\"gar\",\"gor\",\"gûn\",\"gur\",\"iza\",\"izo\",\"kal\",\"kar\",\"kaz\",\"kil\",\"ko\",\"kol\",\"kor\",\"kur\",\"mak\",\"man\",\"mar\",\"maz\",\"mel\",\"mil\",\"mos\",\"na\",\"nak\",\"nar\",\"nek\",\"nik\",\"nor\",\"nos\",\"nuk\",\"nur\",\"nyx\",\"obel\",\"ra\",\"rak\",\"rek\",\"rik\",\"ro\",\"rok\",\"roza\",\"ru\",\"ruk\",\"sa\",\"sak\",\"sik\",\"so\",\"sok\",\"suk\",\"ta\",\"tak\",\"tal\",\"tar\",\"taz\",\"tek\",\"tel\",\"tero\",\"to\",\"tok\",\"tor\",\"tu\",\"tuk\",\"tul\",\"tur\",\"ty\",\"tyl\",\"zak\",\"zar\",\"zek\",\"zir\",\"zor\",\"zuk\",\"zur\"]],\n    \"nano-cognome\":[[\"A\",\"Ba\",\"Bo\",\"Bu\",\"Ka\",\"Ke\",\"Ki\",\"Ko\",\"Ma\",\"Me\",\"Mi\",\"Mo\",\"O\",\"Ra\",\"Ro\",\"Ru\",\"Skra\",\"Skri\",\"Skro\",\"Skru\",\"Sta\",\"Sto\",\"U\",\"Va\",\"Vo\",\"Vu\"],[\"bk\",\"br\",\"k\",\"kb\",\"kl\",\"kn\",\"kr\",\"l\",\"ld\",\"lk\",\"lr\",\"lt\",\"lz\",\"n\",\"nk\",\"nz\",\"r\",\"rk\",\"rl\",\"rz\",\"t\",\"tz\",\"z\",\"zk\",\"\",\"zt\",\"zz\",\"b\",\"k\",\"l\",\"m\",\"n\",\"r\",\"t\",\"v\"],[\"a\",\"ag\",\"e\",\"eg\",\"o\",\"og\",\"u\",\"ug\",\"y\",\"yg\"],[\"b\",\"d\",\"gr\",\"h\",\"j\",\"k\",\"kh\",\"p\",\"r\",\"s\",\"tr\",\"v\",\"x\",\"z\"],[\"a\",\"e\",\"i\",\"o\",\"u\"],[\"_\",\"k\",\"ld\",\"n\",\"r\",\"t\",\"tz\",\"z\",\"zk\"]],\n    \"elfo-femmina\":[[\"Ab\",\"Af\",\"Al\",\"Am\",\"B\",\"D\",\"E\",\"El\",\"Em\",\"En\",\"Ey\",\"F\",\"G\",\"G\",\"If\",\"Il\",\"In\",\"Ir\",\"J\",\"K\",\"K\",\"L\",\"L\",\"M\",\"M\",\"N\",\"N\",\"Ol\",\"On\",\"Or\",\"R\",\"S\",\"T\",\"T\",\"T\",\"Th\",\"Ul\",\"Um\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a'er\",\"ael\",\"aël\",\"ain\",\"al\",\"am\",\"an\",\"ar\",\"ar\",\"ar\",\"eam\",\"ean\",\"ean\",\"ear\",\"ear\",\"ei\",\"el\",\"em\",\"en\",\"er\",\"er\",\"h\",\"i\",\"im\",\"ir\",\"iv\",\"oam\",\"\",\"oan\",\"od\",\"odr\",\"oel\",\"oer\",\"oin\",\"ol\",\"on\",\"ou\"],[\"a\",\"am\",\"aela\",\"ala\",\"alaka\",\"alara\",\"aléa\",\"ama\",\"amana\",\"ana\",\"ani\",\"ara\",\"arana\",\"aya\",\"eala\",\"ealéa\",\"eana\",\"eara\",\"ema\",\"enaka\",\"eola\",\"i\",\"i\",\"ia\",\"ial\",\"ila\",\"ina\",\"oana\",\"oëla\",\"ona\",\"oya\",\"yala\",\"yoa\",\"yola\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"-Al\",\"-Il\",\"-An\",\"-B\",\"-D\",\"-E\",\"-El\",\"-Em\",\"-En\",\"-F\",\"-G\",\"-H\",\"-I\",\"-K\",\"-L\",\"-M\",\"-N\",\"-R\",\"-S\",\"-T\",\"-V\"],[\"a\",\"a\",\"aj\",\"ak\",\"al\",\"am\",\"an\",\"ar\",\"as\",\"av\",\"az\",\"e\",\"e\",\"ej\",\"ek\",\"el\",\"em\",\"en\",\"er\",\"es\",\"ev\",\"ez\",\"i\",\"i\",\"ij\",\"ik\",\"il\",\"im\",\"in\",\"ir\",\"iv\",\"iz\",\"o\",\"o\",\"oj\",\"ok\",\"ol\",\"om\",\"on\",\"or\",\"os\",\"ov\",\"oz\",\"ys\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"al\",\"an\",\"ana\",\"ar\",\"as\",\"az\",\"e\",\"el\",\"em\",\"en\",\"er\",\"il\",\"in\",\"ik\",\"ir\",\"ol\",\"on\",\"or\",\"os\",\"oz\",\"ys\"]],\n    \"elfo-maschio\":[[\"Af\",\"Ad\",\"Af\",\"Ak\",\"Al\",\"Am\",\"An\",\"Ar\",\"B\",\"D\",\"Ed\",\"Ef\",\"Ej\",\"Ek\",\"El\",\"Em\",\"En\",\"Er\",\"Es\",\"Ess\",\"F\",\"G\",\"Id\",\"If\",\"Il\",\"In\",\"Ir\",\"J\",\"K\",\"L\",\"M\",\"N\",\"Ob\",\"Od\",\"Ol\",\"On\",\"Or\",\"R\",\"S\",\"T\",\"Th\",\"Ul\",\"Um\",\"Ys\",\"Yss\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a'er\",\"a'or\",\"af\",\"ah\",\"aj\",\"ak\",\"al\",\"am\",\"an\",\"ar\",\"as\",\"at\",\"eal\",\"eam\",\"ean\",\"ear\",\"eat\",\"el\",\"em\",\"en\",\"er\",\"h\",\"is\",\"il\",\"im\",\"in\",\"ir\",\"iv\",\"o\",\"oal\",\"oam\",\"oan\",\"od\",\"odr\",\"oer\",\"of\",\"ol\",\"on\",\"or\",\"ot\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"ael\",\"ai\",\"oael\",\"aïl\",\"al\",\"aléak\",\"aléo\",\"am\",\"an\",\"ano\",\"aol\",\"ara\",\"ari\",\"eal\",\"ealéa\",\"ean\",\"eara\",\"em\",\"enak\",\"i\",\"iam\",\"ian\",\"iel\",\"il\",\"in\",\"ioël\",\"oal\",\"oam\",\"oan\",\"oar\",\"oel\",\"o\",\"oléa\",\"on\",\"ori\",\"uméa\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"-Al\",\"-Il\",\"-An\",\"-B\",\"-D\",\"-E\",\"-El\",\"-Em\",\"-En\",\"-F\",\"-G\",\"-H\",\"-I\",\"-K\",\"-L\",\"-M\",\"-N\",\"-R\",\"-S\",\"-T\",\"-V\"],[\"a\",\"a\",\"aj\",\"ak\",\"al\",\"am\",\"an\",\"ar\",\"as\",\"av\",\"az\",\"e\",\"e\",\"ej\",\"ek\",\"el\",\"em\",\"en\",\"er\",\"es\",\"ev\",\"ez\",\"i\",\"i\",\"ij\",\"ik\",\"il\",\"im\",\"in\",\"ir\",\"iv\",\"iz\",\"o\",\"o\",\"oj\",\"ok\",\"ol\",\"om\",\"on\",\"or\",\"os\",\"ov\",\"oz\",\"ys\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"al\",\"an\",\"ana\",\"ar\",\"as\",\"az\",\"e\",\"el\",\"em\",\"en\",\"er\",\"il\",\"in\",\"ik\",\"ir\",\"ol\",\"on\",\"or\",\"os\",\"oz\",\"ys\"]],\n    \"goblin-femmina\":[[\"A\",\"Ba\",\"Bo\",\"Bo\",\"Bo\",\"Fo\",\"Ga\",\"Ga\",\"Gri\",\"Gu\",\"Go\",\"Ha\",\"Ho\",\"Hu\",\"Mo\",\"Mo\",\"Ni\",\"Ni\",\"Nje\",\"Nya\",\"Ta\",\"Ta\",\"To\",\"To\",\"Tu\",\"U\",\"Wa\",\"Wo\",\"Y\",\"Y\",\"Za\"],[\"b\",\"d\",\"f\",\"g\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"r\",\"s\",\"t\",\"v\",\"z\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"b\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"kl\",\"kr\",\"l\",\"m\",\"n\",\"p\",\"pr\",\"r\",\"s\",\"w\",\"x\",\"y\"],[\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"aa\",\"e\",\"i\",\"i\",\"ia\",\"ia\",\"ia\",\"oa\",\"oa\",\"oua\",\"u\",\"ua\",\"ua\",\"ui\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"ba\",\"da\",\"ga\",\"gla\",\"ka\",\"kla\",\"la\",\"lea\",\"lia\",\"ma\",\"ra\",\"sa\",\"ssa\",\"wa\",\"za\"]],\n    \"goblin-maschio\":[[\"Alg\",\"Arr\",\"Bar\",\"Buh\",\"D\",\"Dud\",\"Ed\",\"Ederl\",\"Err\",\"G\",\"Gam\",\"Gar\",\"Garm\",\"Gor\",\"Gr\",\"Id\",\"Ilf\",\"Lar\",\"Ler\",\"Lir\",\"Nj\",\"Odb\",\"Oddg\",\"Ogt\",\"Olf\",\"Oll\",\"Orf\",\"Orr\",\"Ort\",\"Pas\",\"Pus\",\"Shagg\",\"Shigg\",\"Shogg\",\"Shoggl\",\"Shuggl\",\"T\",\"Uddg\",\"Ugt\",\"Ul\",\"Ulf\",\"Urf\",\"Ten\",\"Tenl\",\"Dur\",\"Dor\"],[\"_\",\"_\",\"add\",\"ag\",\"alak\",\"alf\",\"alg\",\"alok\",\"als\",\"alubbung\",\"alusk\",\"am\",\"amok\",\"arak\",\"arok\",\"att\",\"egg\",\"elfons\",\"elg\",\"o\",\"odd\",\"ofin\",\"olf\",\"olg\",\"olok\",\"ols\",\"olusk\",\"om\",\"omak\",\"ons\",\"or\",\"ott\",\"udd\",\"ug\",\"ulf\",\"ulg\",\"ulk\",\"uls\",\"uluk\",\"um\",\"umuk\",\"unch\"]],\n    \"goblin-tribù\":[[\"Kl\",\"B\",\"Br\",\"G\",\"Gr\",\"H\",\"K\",\"K\",\"Kr\",\"L\",\"V\"],[\"a\",\"a\",\"e\",\"o\",\"o\",\"u\",\"i\"],[\"dd\",\"k\",\"pp\",\"r\",\"rd\",\"rr\",\"rrb\",\"tr\",\"tt\",\"kr\",\"rk\",\"kk\",\"kp\",\"rk\"],[\"a\",\"o\",\"u\",\"e\",\"y\",\"a\",\"o\",\"u\"],[\"bb\",\"br\",\"g\",\"gg\",\"gl\",\"kk\",\"kkt\",\"kr\",\"ks\",\"l\",\"lk\",\"p\",\"r\",\"rd\",\"t\",\"sk\"],[\"a\",\"i\",\"o\",\"u\",\"a\",\"o\",\"_\"],[\"bb\",\"dd\",\"gr\",\"dr\",\"rb\",\"rr\",\"gg\",\"k\",\"t\",\"ll\",\"rd\",\"d\",\"r\",\"rk\",\"tt\"],[\"_\",\"a\",\"akk\",\"o\",\"okk\",\"u\",\"ukk\",\"ik\",\"ar\",\"or\",\"ur\",\"ark\",\"urk\",\"ak\",\"ok\"]],\n    \"troll-normale\":[[\"Ag\",\"Ak\",\"Ar\",\"Bar\",\"Bav\",\"Bo\",\"Bor\",\"Bov\",\"Da\",\"El\",\"Er\",\"Gal\",\"Gar\",\"Gav\",\"Gol\",\"Lus\",\"O\",\"On\",\"Or\",\"Ra\",\"Rag\",\"Sag\",\"Sagna\",\"Sar\",\"Ska\",\"Sor\",\"Vak\",\"Vaz\",\"Vok\",\"Voz\",\"Zak\",\"Zar\",\"Zor\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"b\",\"d\",\"_\",\"g\",\"h\",\"l\",\"m\",\"n\",\"k\",\"p\",\"v\",\"w\",\"x\",\"gr\",\"kr\",\"br\"],[\"_\",\"a\",\"ak\",\"al\",\"an\",\"anga\",\"ar\",\"aun\",\"az\",\"axar\",\"ek\",\"el\",\"er\",\"ez\",\"ok\",\"or\",\"oz\",\"ox\",\"uk\",\"un\",\"ur\",\"oxo\",\"ongo\"],[\"_\",\"_\",\"_\",\"ar\",\"dar\",\"dorg\",\"dos\",\"ga\",\"garg\",\"gha\",\"ka\",\"kar\",\"mok\",\"mor\",\"orde\",\"oum\",\"rak\",\"vak\"]],\n    \"troll-anziano\":[[\"A\",\"Ba\",\"Bo\",\"Bra\",\"Bro\",\"Bru\",\"Bu\",\"Da\",\"Do\",\"Du\",\"E\",\"Ga\",\"Go\",\"Gra\",\"Gri\",\"Gro\",\"Gru\",\"Gu\",\"Ji\",\"Jo\",\"Ka\",\"Ki\",\"Ko\",\"Kra\",\"Kro\",\"Ku\",\"La\",\"Lo\",\"Lu\",\"Ma\",\"Mo\",\"Mu\",\"O\",\"Ra\",\"Ro\",\"Ru\",\"Sa\",\"Saxna\",\"Ska\",\"Sko\",\"Sku\",\"So\",\"Su\",\"Xa\",\"Xava\",\"Xi\",\"Xo\",\"Xu\"],[\"_\",\"_\",\"_\",\"_\",\"b\",\"d\",\"dz\",\"g\",\"gr\",\"h\",\"k\",\"k\",\"kr\",\"ks\",\"l\",\"lk\",\"ll\",\"lx\",\"m\",\"n\",\"n\",\"nx\",\"r\",\"r\",\"r\",\"rg\",\"rk\",\"rx\",\"s\",\"tt\",\"v\",\"x\",\"x\",\"x\",\"x\",\"x\",\"z\"],[\"a\",\"ako\",\"axa\",\"axo\",\"e\",\"i\",\"o\",\"oka\",\"oko\",\"ou\",\"oxa\",\"u\",\"y\"],[\"_\",\"b\",\"d\",\"g\",\"h\",\"j\",\"k\",\"kr\",\"kx\",\"l\",\"m\",\"mb\",\"mg\",\"mx\",\"n\",\"nb\",\"ng\",\"nx\",\"r\",\"r\",\"rd\",\"rg\",\"rk\",\"rx\",\"s\",\"sk\",\"t\",\"tr\",\"v\",\"w\",\"x\",\"x\",\"x\",\"x\",\"x\",\"z\"],[\"a\",\"a\",\"a\",\"a\",\"a\",\"ha\",\"i\",\"i\",\"o\",\"o\",\"o\",\"o\",\"o\",\"ou\",\"u\",\"u\",\"u\"],[\"_\",\"g\",\"k\",\"kh\",\"kk\",\"l\",\"ll\",\"m\",\"n\",\"r\",\"rd\",\"rd\",\"rdax\",\"rdox\",\"rg\",\"rx\",\"rx\",\"s\",\"t\",\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\"z\"]]    \n};\n\n(()=>{\n\n    let keys = Object.keys(allNames);\n    console.log(keys);\n    let allKeys = \"\";\n    keys.forEach(t => {\n        allKeys = allKeys.concat(`<option value=\"${t}\">${t}`);\n    });\n    console.log(allKeys);\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n      <label for=\"category\">Seleziona il generatore</label>\n      <select id=\"category\" name=\"category\">${allKeys}\n      </select>\n    </div>`;\n\n    // let template = Handlebars.compile(dialog_content);\n    \n  \n    let x = new Dialog({\n      content : dialog_content,\n      alternatives: keys,\n      buttons : \n      {\n        Ok : { label : `Ok`, callback : async (html)=> await generateNames(html.find('#category')[0].value)},\n        Cancel : {label : `Annulla`}\n      }\n    });\n  \n    x.options.width = 200;\n    x.position.width = 200;\n  \n    x.render(true);\n  \n})();\n\nasync function generateNames(category)\n{\n    let message = \"\";\n    message += \"Category \"+category;\n\n    let nameParts = allNames[category];\n\n    for( let i = 0; i < 10; i++) {\n        let fullName = \"\";\n\n        for ( let syllabel of nameParts ) {\n            let syllabelIndex = Math.floor(Math.random() * syllabel.length);\n            let actualSyllabel = syllabel[syllabelIndex];\n            if( actualSyllabel != \"_\") {\n                fullName = fullName.concat(actualSyllabel);\n            } else {\n                break;\n            }\n        }\n        // });\n\n        message += `<br />Name ${i+1} ${fullName}`;\n    }\n\n    ChatMessage.create({\n        speaker: ChatMessage.getSpeaker({alias: \"Name generator\"}),\n        whisper: [game.user], // ChatMessage.getWhisperRecipients('GM'),\n        content: message        \n    });\n}",
      "flags": {
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296886773,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.M2pRCm23Siqt61qp",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "azXEYAyjYKokx6Kl"
    },
    {
      "name": "Danno Alternativo",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/stoned.svg",
      "scope": "global",
      "command": "if (canvas.tokens.controlled.length === 0)\n  return ui.notifications.error(\"Please select a token first\");\n\nnew Dialog({\n  title: `Danno alternativo`,\n  content: `\n    <form>\n    <div style=\"display:flex\">\n    <label style=\"min-width:15em\" for=\"damagetype\">Danno alla caratteristica:</label>\n    <select id=\"vision-type\" style=\"min-width:10em\" name=\"damagetype\">\n    <option value=\"accurate\">${game.i18n.localize(\"ATTRIBUTE.ACCURATE\")}</option>\n    <option value=\"cunning\">${game.i18n.localize(\"ATTRIBUTE.CUNNING\")}</option>\n    <option value=\"discreet\">${game.i18n.localize(\"ATTRIBUTE.DISCREET\")}</option>\n    <option value=\"persuasive\">${game.i18n.localize(\"ATTRIBUTE.PERSUASIVE\")}</option>\n    <option value=\"quick\">${game.i18n.localize(\"ATTRIBUTE.QUICK\")}</option>\n    <option value=\"resolute\">${game.i18n.localize(\"ATTRIBUTE.RESOLUTE\")}</option>\n    <option value=\"strong\">${game.i18n.localize(\"ATTRIBUTE.STRONG\")}</option>\n    <option value=\"vigilant\">${game.i18n.localize(\"ATTRIBUTE.VIGILANT\")}</option>    \n    </select>\n    </div>\n    <div style=\"display:flex; margin-top:5px; margin-bottom:5px\">\n    <label style=\"min-width:15em\" for=\"altdam\">Danno:</label>\n    <input style=\"max-width:10em\" id=\"altdam\" name=\"altdam\" type=\"text\">\n    </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Applica il danno`,\n      callback: async (html)=> {\n          await dealDamage(html.find(\"#vision-type\")[0].value, html.find('#altdam')[0].value);\n        }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Annullla il danno`\n    },\n  },\n  default: \"yes\",\n}).render(true);\n\nasync function dealDamage(type, damage)\n{\n    for ( let token of canvas.tokens.controlled ) {\n        let calcDam = parseInt(damage) * -1;\n        if( isNaN(calcDam)) {\n            console.log(\"Can't understand damage[\"+damage+\"] - is this a number?\");\n            break;\n        }\n        let actor = token.actor;\n        if( actor.data.data.attributes[type] === undefined || actor.data.data.attributes[type] === null) {\n            console.log(\"This is not an attribute in Symbaroum\");\n            break;\n        }\n        let tot = actor.data.data.attributes[type].temporaryMod + calcDam;\n        let modification = {        };\n        setProperty(modification, `data.attributes.${type}.temporaryMod`, tot);        \n        await actor.update(modification);\n    }\n}",
      "flags": {
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664296886773,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.8cLkjnA8FBNnVMOm",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "qE7Pdtl0o0AjnVlb"
    },
    {
      "name": "Paga per ritirare",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/d20-grey.svg",
      "scope": "global",
      "command": "/** \n * Macro paga per ritirare. \n *\n La macro può sessere utilizzata selezionando dei token sullo schermo, se nessun token è selezionato, si possono selezionare i vari personaggi (default tutti)\n * \n */\n (()=>{\n    let defaultCheck = \"unchecked\"; // set to unchecked\n    let bithirsGame = true; // It is not a bithir world unless this is set\n    let actorslist = [];\n\n    if(canvas.tokens.controlled.length > 0) {\n        // If no actor selected\n        // Time to get busy\n        canvas.tokens.controlled.map(e => { \n            if(e.actor.data.type === \"player\") {\n                if(game.user.isGM || e.actor.owner)\n                    actorslist.push(e.actor);\n            }\n        });\n        if(actorslist.length > 0 ) { actorslist = [actorslist[0]]; }\n        // check if there are tokens on the map, if so, use their actors\n        // if there are no controlled tokens on the map, select all players in the actor catalogue\n    } else {     \n        let gameacts = game.actors.filter(e => { if( (game.user.isGM || e.owner) && e.data.type === \"player\") { return e; } });\n        Array.prototype.push.apply(actorslist, gameacts);\n    }\n    \n\n    if(actorslist.length === 0) {\n        ui.notifications.info(`No actor available for you to apply re-roll cost`);\n        return;\n    } else if(actorslist.length === 1) {\n        defaultCheck = \"checked\";\n    }    \n\n    let allKeys = \"\";\n    actorslist.forEach(t => {\n        allKeys = allKeys.concat(`<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"${t.data._id}\">${t.data.name}</label> </div>\n                <div><input id=\"${t.data._id}\" type=\"radio\" name=\"selection\" value=\"${t.data._id}\" ${defaultCheck}=\"${defaultCheck}\"></div>\n            </div>`);\n    });\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n    <h2>Seleziona i giocatori</h2>\n    ${allKeys}\n    <br />\n    <div>Seleziona cosa pagare per ritirare</div>\n    <div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n        <div style=\"width:10em;min-width:10em;\"><label for=\"artifactrr\">Esperienza</label> </div>\n        <div><input type=\"radio\" id=\"artifactrr\" value=\"artifactrr\" name=\"costType\"></div>\n    </div>\n    <div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n        <div style=\"width:10em;min-width:10em;\"><label for=\"permanent\">Corruzione (perm)</label></div>\n        <div><input type=\"radio\" id=\"permanent\" value=\"permanent\" name=\"costType\"></div>\n    </div>`;\n    if(bithirsGame) {\n        dialog_content = dialog_content + `<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n        <div style=\"width:10em;min-width:10em;\"><label for=\"permanent\">Corruzione (giornaliera)</label></div>\n        <div><input type=\"radio\" id=\"longterm\" value=\"longterm\" name=\"costType\"></div>\n        </div>`;\n    }\n    dialog_content += `<br /></div>`;\n    let x = new Dialog({\n        title: \"Take cost for re-roll\",\n        content : dialog_content,\n        buttons : \n        {\n            Ok :{ label : `Ok`, callback : async (html) => {             \n                                            let tmp = html.find(\"input[name='selection']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});\n                                            let costType = html.find(\"input[name='costType']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});\n\n                                            await payCost(tmp,costType);\n                                        }\n                },\n            Cancel : {label : `Annulla`}\n        }\n    });\n    \n    x.options.width = 200;\n    x.position.width = 300;\n    \n    x.render(true);\n})();\n\nasync function payCost(actorids, costType)\n{\n    let aexp = null;\n    let actorName = \"\";\n    \n    let message_content = \"\";\n    let dice = new Roll(\"1d4\");\n    dice.roll();\n\n    let updates = actorids.map(a => {\n        aexp = game.actors.get(a);\n        actorName = aexp.name;        \n        return {\n            _id: a,\n            \"data.experience.artifactrr\": aexp.data.data.experience.artifactrr + ( costType.includes(\"artifactrr\")? 1:0),\n            \"data.health.corruption.permanent\": aexp.data.data.health.corruption.permanent + ( costType.includes(\"permanent\")? 1:0),\n            \"data.health.corruption.longterm\": aexp.data.data.health.corruption.longterm + ( costType.includes(\"longterm\")? dice.total:0)\n        };\n    });\n    console.log(updates);\n    let chatOptions = {\n        speaker: {\n\t\t\tactor: aexp._id\n\t    },\n        rollMode: game.settings.get(\"core\", \"rollMode\")\n     };\n\n    // \n    if( costType.includes(\"longterm\") ) {\n        /** Only applicable for Bithir game */\n        chatOptions[\"type\"] = CHAT_MESSAGE_TYPES.ROLL;\n        chatOptions[\"content\"] = `<h2>Re-roll for daily corruption</h2> \n            ${actorName} paid ${dice.total} daily corruption for a re-roll`;        \n        chatOptions[\"roll\"] = dice;\n    } else {\n        chatOptions[\"content\"] = `<h2>Re-roll for ${ costType.includes(\"artifactrr\") ? \"experience\":\"permanent corruption\" }</h2>\n            ${actorName} paid 1 ${ costType.includes(\"artifactrr\") ? \"experience\":\"permanent corruption\" } for a re-roll`\n        \n    }\n    ChatMessage.create(chatOptions);     \n    await Actor.update(updates);\n    \n    // Post results\n}",
      "flags": {
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298202056,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.ZOmWDVLXwLd9aT1L",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "CtKabYv0bAt23SBQ"
    },
    {
      "name": "Danno Alternativo",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/stoned.svg",
      "scope": "global",
      "command": "if (canvas.tokens.controlled.length === 0)\n  return ui.notifications.error(\"Please select a token first\");\n\nnew Dialog({\n  title: `Danno alternativo`,\n  content: `\n    <form>\n    <div style=\"display:flex\">\n    <label style=\"min-width:15em\" for=\"damagetype\">Danno alla caratteristica:</label>\n    <select id=\"vision-type\" style=\"min-width:10em\" name=\"damagetype\">\n    <option value=\"accurate\">${game.i18n.localize(\"ATTRIBUTE.ACCURATE\")}</option>\n    <option value=\"cunning\">${game.i18n.localize(\"ATTRIBUTE.CUNNING\")}</option>\n    <option value=\"discreet\">${game.i18n.localize(\"ATTRIBUTE.DISCREET\")}</option>\n    <option value=\"persuasive\">${game.i18n.localize(\"ATTRIBUTE.PERSUASIVE\")}</option>\n    <option value=\"quick\">${game.i18n.localize(\"ATTRIBUTE.QUICK\")}</option>\n    <option value=\"resolute\">${game.i18n.localize(\"ATTRIBUTE.RESOLUTE\")}</option>\n    <option value=\"strong\">${game.i18n.localize(\"ATTRIBUTE.STRONG\")}</option>\n    <option value=\"vigilant\">${game.i18n.localize(\"ATTRIBUTE.VIGILANT\")}</option>    \n    </select>\n    </div>\n    <div style=\"display:flex; margin-top:5px; margin-bottom:5px\">\n    <label style=\"min-width:15em\" for=\"altdam\">Danno:</label>\n    <input style=\"max-width:10em\" id=\"altdam\" name=\"altdam\" type=\"text\">\n    </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Applica il danno`,\n      callback: async (html)=> {\n          await dealDamage(html.find(\"#vision-type\")[0].value, html.find('#altdam')[0].value);\n        }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Annullla il danno`\n    },\n  },\n  default: \"yes\",\n}).render(true);\n\nasync function dealDamage(type, damage)\n{\n    for ( let token of canvas.tokens.controlled ) {\n        let calcDam = parseInt(damage) * -1;\n        if( isNaN(calcDam)) {\n            console.log(\"Can't understand damage[\"+damage+\"] - is this a number?\");\n            break;\n        }\n        let actor = token.actor;\n        if( actor.data.data.attributes[type] === undefined || actor.data.data.attributes[type] === null) {\n            console.log(\"This is not an attribute in Symbaroum\");\n            break;\n        }\n        let tot = actor.data.data.attributes[type].temporaryMod + calcDam;\n        let modification = {        };\n        setProperty(modification, `data.attributes.${type}.temporaryMod`, tot);        \n        await actor.update(modification);\n    }\n}",
      "flags": {
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298202056,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.8cLkjnA8FBNnVMOm",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "mLRZCT2hqQ63cGsC"
    },
    {
      "name": "Tira l'attributo",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/dice-target.svg",
      "scope": "global",
      "command": "(()=>{\n    let defaultCheck = \"unchecked\"; // set to unchecked\n    let actorslist = [];\n\n    if(canvas.tokens.controlled.length > 0) {\n        // If no actor selected\n        // Time to get busy\n        canvas.tokens.controlled.map(e => { \n            if(e.actor.data.type === \"player\") {\n                if(game.user.isGM || e.actor.owner)\n                    actorslist.push(e.actor);\n            }\n        });\n        if(actorslist.length > 0 ) { actorslist = [actorslist[0]]; }\n        // check if there are tokens on the map, if so, use their actors\n        // if there are no controlled tokens on the map, select all players in the actor catalogue\n    } else {     \n        let gameacts = game.actors.filter(e => { if( (game.user.isGM || e.owner) && e.data.type === \"player\") { return e; } });\n        Array.prototype.push.apply(actorslist, gameacts);\n    }\n\n    if(actorslist.length === 0) {\n        ui.notifications.info(`No actor available for you to do an attribute test`);\n        return;\n    } else if(actorslist.length === 1) {\n        defaultCheck = \"checked\";\n    }\n\n    let allActors = \"\";\n    actorslist.forEach(t => {\n        allActors = allActors.concat(`<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"${t.data._id}\">${t.data.name}</label> </div>\n                <div><input id=\"${t.data._id}\" type=\"radio\" name=\"selection\" value=\"${t.data._id}\" ${defaultCheck}=\"${defaultCheck}\"></div>\n            </div>`);\n    });\n    \n    let keys = Object.keys(actorslist[0].data.data.attributes);\n    let allKeys = \"\";\n    keys.forEach(t => {\n        allKeys = allKeys.concat(`<option value=\"${t}\">${game.i18n.localize(actorslist[0].data.data.attributes[t].label)}`);\n    });\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n    <h2>Seleziona i giocatori</h2>\n    ${allActors}\n    <br />\n    <div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n    <div style=\"width:10em;min-width:10em;\"><label for=\"attribute\" style=\"min-width:10em\">${game.i18n.localize(\"DIALOG.ATTRIBUTE\")}</label> </div>\n    <div style=\"width:10em;min-width:10em;\"><select id=\"attribute\" name=\"category\">${allKeys}</select></div>\n    </div><br/>\n    </div>`;\n\n    let x = new Dialog({\n        content : dialog_content,\n        alternatives: keys,\n        buttons : \n        {\n        Ok : { label : `Ok`, callback : async (html)=> {\n                let tmp = html.find(\"input[name='selection']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});\n                await rollAttribute(tmp, html.find('#attribute')[0].value);\n            }\n        },\n        Cancel : {label : `Annulla`}\n        }\n    });\n    \n    x.options.width = 200;\n    x.position.width = 300;\n    \n    x.render(true);\n})();\n\nasync function rollAttribute(actorids, attribute)\n{\n    let updates = actorids.map(a => {\n        let aexp = game.actors.get(a);\n        aexp.rollAttribute(attribute, null, null);\n    });\n}",
      "flags": {
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298202057,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.jqlw2EhoIe8KhTuu",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "DtHTbe49kNGHmZWv"
    },
    {
      "name": "Generatore Di Nomi",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/hanging-sign.svg",
      "scope": "global",
      "command": "let allNames = {\n    \"ambiano-femmina\":[[\"A\",\"Abe\",\"Ad\",\"Ag\",\"Aj\",\"Al\",\"Ales\",\"Ali\",\"Almer\",\"Am\",\"An\",\"Apo\",\"Ar\",\"Asm\",\"Ay\",\"Ba\",\"Be\",\"Bel\",\"Da\",\"De\",\"Del\",\"Desi\",\"Di\",\"Dis\",\"Do\",\"Du\",\"E\",\"El\",\"Eli\",\"Elio\",\"Em\",\"Er\",\"Es\",\"Eu\",\"Eve\",\"Ever\",\"Fe\",\"Fren\",\"Gar\",\"Ge\",\"Gen\",\"Gin\",\"Go\",\"Ha\",\"He\",\"Her\",\"Hu\",\"Hul\",\"Hur\",\"Id\",\"Il\",\"io\",\"Ir\",\"Is\",\"Je\",\"Ju\",\"Ka\",\"Kah\",\"Kar\",\"Kol\",\"Kor\",\"Kral\",\"Ky\",\"La\",\"Las\",\"Lav\",\"Le\",\"Les\",\"Levi\",\"Li\",\"Lin\",\"Lo\",\"Lore\",\"Losa\",\"Lu\",\"Lup\",\"Ly\",\"Lyr\",\"Lys\",\"Ma\",\"Mal\",\"Mar\",\"Me\",\"Mel\",\"Mer\",\"Mi\",\"Mo\",\"Mo\",\"Mor\",\"Myr\",\"Nad\",\"Ne\",\"Nefer\",\"Nod\",\"Ob\",\"Od\",\"Of\",\"Or\",\"Ot\",\"Ou\",\"Pe\",\"Per\",\"Pet\",\"Pur\",\"Rab\",\"Rev\",\"Ri\",\"Ro\",\"Sa\",\"Saf\",\"Sal\",\"Sam\",\"Sef\",\"Sel\",\"Sen\",\"Ser\",\"Si\",\"So\",\"Sol\",\"Sur\",\"Ta\",\"Tan\",\"Te\",\"Tel\",\"Ter\",\"Tin\",\"Tob\",\"Tor\",\"Tred\",\"Tul\",\"U\",\"Ul\",\"Val\",\"Van\",\"Var\",\"Vem\",\"Vol\",\"Ni\" ], [\"a\",\"abela\",\"abelora\",\"adea\",\"adena\",\"afera\",\"afia\",\"agina\",\"agra\",\"ala\",\"alia\",\"alna\",\"ama\",\"ana\",\"veta\",\"anda\",\"andra\",\"anitra\",\"anja\",\"area\",\"aria\",\"ata\",\"athara\",\"bela\",\"belora\",\"betha\",\"da\",\"dara\",\"darea\",\"dea\",\"dela\",\"delia\",\"dera\",\"detta\",\"dindra\",\"disa\",\"dla\",\"dola\",\"dora\",\"dorna\",\"dra\",\"drona\",\"eana\",\"earia\",\"edra\",\"eia\",\"ela\",\"elda\",\"elea\",\"elia\",\"ella\",\"elya\",\"ema\",\"ena\",\"endra\",\"enia\",\"enora\",\"era\",\"erda\",\"esla\",\"esma\",\"eva\",\"evia\",\"feia\",\"ferena\",\"fia\",\"frynda\",\"ga\",\"ganda\",\"gha\",\"gida\",\"gusta\",\"hara\",\"helda\",\"ia\",\"ida\",\"idna\",\"iela\",\"ilia\",\"ima\",\"ina\",\"indra\",\"inora\",\"inthia\",\"iol\",\"ira\",\"ka\",\"kresia\",\"la\",\"lalia\",\"lara\",\"lea\",\"lega\",\"lena\",\"lia\",\"lida\",\"lina\",\"linda\",\"line\",\"loena\",\"lona\",\"lusa\",\"ma\",\"manda\",\"mara\",\"mea\",\"melia\",\"mendra\",\"munda\",\"na\",\"nara\",\"nia\",\"nid\",\"nora\",\"oaleta\",\"oena\",\"ola\",\"olia\",\"ona\",\"ora\",\"oya\",\"ria\",\"rona\",\"sa\",\"sana\",\"seba\",\"séfia\",\"sina\",\"stra\",\"suma\",\"thena\",\"tia\",\"tina\",\"tulda\",\"va\",\"vana\",\"vea\",\"via\",\"yela\",\"yola\" ] ],\n    \"ambriano-femmina\":[[ \"Abra\",\"Ad\",\"Ag\",\"Al\",\"Als\",\"An\",\"Ar\",\"As\",\"Au\",\"Az\",\"Bal\",\"Bar\",\"Bau\",\"Be\",\"Ber\",\"Bur\",\"Cor\",\"Da\",\"Dag\",\"Dar\",\"De\",\"Deg\",\"Dek\",\"Del\",\"Do\",\"Dor\",\"Eb\",\"Ed\",\"Ef\",\"Eg\",\"El\",\"Em\",\"En\",\"Er\",\"Eu\",\"Far\",\"Far\",\"Fe\",\"Fer\",\"Fre\",\"Gad\",\"Gal\",\"Gel\",\"Gon\",\"Gor\",\"Gra\",\"Gre\",\"Gren\",\"Gro\",\"Gun\",\"Har\",\"Has\",\"Hen\",\"Her\",\"Hu\",\"Ia\",\"Iar\",\"Ias\",\"Id\",\"Il\",\"Is\",\"Ja\",\"jeu\",\"Jo\",\"Jor\",\"Ju\",\"Jur\",\"Ka\",\"Kag\",\"Kar\",\"Kas\",\"Kat\",\"Ke\",\"Ker\",\"Kla\",\"Kor\",\"Kur\",\"La\",\"Lar\",\"Las\",\"Le\",\"Leo\",\"Lug\",\"Ma\",\"Ma\",\"Mal\",\"Man\",\"Mar\",\"Mer\",\"Mog\",\"Mor\",\"Mul\",\"Na\",\"Ne\",\"Nei\",\"Ni\",\"Nor\",\"Od\",\"Og\",\"Ol\",\"Om\",\"On\",\"Or\",\"Pe\",\"Pel\",\"Pen\",\"Per\",\"Prio\",\"Ra\",\"Rad\",\"Ran\",\"Ri\",\"Sa\",\"San\",\"Sar\",\"Se\",\"Sel\",\"Ser\",\"Ses\",\"Si\",\"Ska\",\"Son\",\"Ta\",\"Tal\",\"Teo\",\"Ton\",\"Tor\",\"Tul\",\"Tur\",\"U\",\"Un\",\"Val\",\"Ven\",\"Vol\",\"Yn\"],[\"adir\",\"ado\",\"agai\",\"ai\",\"akai\",\"akleo\",\"aklon\",\"ako\",\"al\",\"aldo\",\"alg\",\"alo\",\"alon\",\"am\",\"amedo\",\"amei\",\"amo\",\"an\",\"andan\",\"ander\",\"ando\",\"andro\",\"angoi\",\"ani\",\"antro\",\"aon\",\"ario\",\"aros\",\"ask\",\"asto\",\"baios\",\"balmer\",\"bardo\",\"beo\",\"berdo\",\"bian\",\"bio\",\"cai\",\"dag\",\"dai\",\"dam\",\"damei\",\"dar\",\"daro\",\"das\",\"del\",\"der\",\"dered\",\"din\",\"dir\",\"do\",\"dol\",\"donio\",\"doro\",\"dramos\",\"dro\",\"dros\",\"eago\",\"ean\",\"eas\",\"edar\",\"edo\",\"egat\",\"ego\",\"ek\",\"elgoi\",\"elo\",\"eno\",\"eo\",\"eon\",\"eono\",\"erio\",\"ero\",\"eron\",\"ertos\",\"esoro\",\"esto\",\"eto\",\"ex\",\"fald\",\"falt\",\"fan\",\"fas\",\"feno\",\"fer\",\"foldo\",\"gai\",\"gal\",\"gald\",\"galm\",\"galo\",\"gando\",\"gasto\",\"gat\",\"gaton\",\"gel\",\"gero\",\"gio\",\"go\",\"goboi\",\"goi\",\"gomo\",\"gon\",\"gor\",\"gurst\",\"hal\",\"ian\",\"iano\",\"ieno\",\"il\",\"io\",\"ion\",\"iro\",\"kad\",\"kali\",\"kander\",\"kandro\",\"kanor\",\"kantor\",\"kel\",\"ker\",\"kered\",\"kerio\",\"kilo\",\"kobo\",\"komo\",\"laber\",\"lago\",\"lamei\",\"lando\",\"lani\",\"las\",\"leo\",\"ler\",\"lianos\",\"lio\",\"lios\",\"liostro\",\"loan\",\"logoi\",\"lomei\",\"lon\",\"los\",\"ludo\",\"magast\",\"mando\",\"mandro\",\"mar\",\"med\",\"medo\",\"mei\",\"melin\",\"melio\",\"melo\",\"men\",\"mendo\",\"menos\",\"meo\",\"metro\",\"milo\",\"milos\",\"nan\",\"nander\",\"nas\",\"nego\",\"nelio\",\"niam\",\"nio\",\"non\",\"nos\",\"o\",\"ogai\",\"ogoi\",\"oi\",\"okles\",\"olai\",\"old\",\"oldo\",\"on\",\"or\",\"os\",\"pano\",\"par\",\"pelo\",\"rafin\",\"rag\",\"ral\",\"ram\",\"ramai\",\"ramei\",\"ran\",\"rek\",\"relin\",\"remo\",\"rian\",\"ro\",\"ryn\",\"sander\",\"sel\",\"selg\",\"selm\",\"so\",\"so\",\"stak\",\"tan\",\"tar\",\"tel\",\"tho\",\"thos\",\"to\",\"to\",\"tolom\",\"torio\",\"tos\",\"tri\",\"under\",\"undi\",\"val\",\"valom\",\"vano\",\"vean\",\"vello\",\"vido\"] ],\n    \"ambriano-nobile\":[[\"_\",\"_\",\"_\",\"_\",\"_\",\"Ar\",\"Arg\",\"Br\",\"D\",\"Der\",\"Dr\",\"El\",\"Eld\",\"Els\",\"Elv\",\"Er\",\"F\",\"G\",\"Gal\",\"Gar\",\"Gor\",\"Gr\",\"H\",\"Hal\",\"Har\",\"Her\",\"Hol\",\"Hur\",\"K\",\"L\",\"Lor\",\"M\",\"Mar\",\"Mir\",\"Mor\",\"N\",\"Or\",\"P\",\"R\",\"S\",\"Sal\",\"St\",\"T\",\"V\",\"J\"],[\"a\",\"a\",\"a\",\"ao\",\"e\",\"e\",\"e\",\"ea\",\"eo\",\"i\",\"ia\",\"Ie\",\"io\",\"o\",\"o\",\"ou\",\"u\"],[\"b\",\"b\",\"d\",\"d\",\"f\",\"g\",\"k\",\"l\",\"l\",\"ld\",\"lf\",\"lg\",\"m\",\"n\",\"nd\",\"ng\",\"nl\",\"p\",\"r\",\"r\",\"rc\",\"rd\",\"rf\",\"rg\",\"rk\",\"rl\",\"rn\",\"rr\",\"rt\",\"s\",\"t\",\"th\",\"tt\"],[\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"e\",\"e\",\"e\",\"e\",\"e\",\"ei\",\"eia\",\"eo\",\"i\",\"ia\",\"io\",\"o\",\"o\",\"o\",\"o\",\"o\",\"ou\",\"u\",\"y\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"g\",\"j\",\"k\",\"k\",\"l\",\"l\",\"le\",\"ll\",\"n\",\"n\",\"r\",\"r\",\"ren\",\"rn\",\"s\",\"s\",\"s\",\"st\",\"t\",\"v\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"en\",\"o\",\"ar\",\"e\"]],\n    \"barbaro-femmina\":[[\"Ag\",\"Al\",\"Ar\",\"Ay\",\"Ba\",\"Ber\",\"Bo\",\"Bra\",\"Dan\",\"De\",\"Dea\",\"Ea\",\"Eb\",\"Efer\",\"El\",\"Era\",\"Fat\",\"Ful\",\"Gam\",\"Gor\",\"Hel\",\"In\",\"Kar\",\"Kat\",\"Kath\",\"Katran\",\"Klar\",\"Lob\",\"Mak\",\"Mar\",\"Mat\",\"Mir\",\"Mol\",\"Mon\",\"Mor\",\"Ob\",\"Or\",\"Ra\",\"Se\",\"Ser\",\"Sun\",\"Ter\",\"Tha\",\"Tir\",\"Un\",\"Va\",\"Vai\",\"Ver\",\"Vik\",\"Ya\",\"Ya\",\"Yag\",\"Yah\",\"Yg\"],[\"a\",\"aba\",\"abel\",\"agba\",\"agona\",\"ala\",\"alba\",\"alga\",\"ama\",\"ana\",\"asa\",\"aya\",\"ba\",\"baga\",\"da\",\"dala\",\"dana\",\"dorna\",\"ea\",\"ela\",\"elba\",\"elba\",\"ema\",\"ena\",\"fa\",\"gara\",\"gaya\",\"idja\",\"ima\",\"ina\",\"ionor\",\"ma\",\"na\",\"na\",\"nata\",\"neia\",\"neya\",\"nia\",\"oaleta\",\"ona\",\"onya\",\"ra\",\"raga\",\"rama\",\"rana\",\"shela\",\"suma\",\"ulda\",\"vana\",\"voba\",\"rona\",\"lea\",\"esma\",\"dama\"]],\n    \"barbaro-maschio\":[[\"Ag\",\"Al\",\"Am\",\"An\",\"Ar\",\"Ash\",\"Av\",\"Bag\",\"Bah\",\"Ban\",\"Barr\",\"Bel\",\"Ber\",\"Bir\",\"Bo\",\"Dar\",\"Did\",\"Dor\",\"Dorm\",\"Emb\",\"Erg\",\"Fa\",\"Far\",\"Gad\",\"Gal\",\"Gar\",\"Gir\",\"Gol\",\"Goth\",\"Gron\",\"Hab\",\"Hal\",\"Hel\",\"Ho\",\"Hohax\",\"Hub\",\"Iah\",\"In\",\"Jon\",\"Jor\",\"Ka\",\"Kar\",\"Kath\",\"Kod\",\"Kum\",\"Kur\",\"Kva\",\"Leo\",\"Lobaya\",\"Loth\",\"Lu\",\"Maiestic\",\"Mal\",\"Man\",\"Mar\",\"Meo\",\"Mo\",\"Mon\",\"Mor\",\"Nog\",\"Od\",\"Odal\",\"Ok\",\"Om\",\"Or\",\"Ov\",\"Par\",\"Rabai\",\"Rag\",\"Ran\",\"Razame\",\"Ro\",\"Sa\",\"Ser\",\"Seyer\",\"Soa\",\"Sot\",\"Tha\",\"The\",\"Tor\",\"Un\",\"Val\",\"Vik\",\"Vog\",\"Yag\",\"Yak\",\"Yar\",\"Ye\",\"Yg\",\"Yo\",\"Zol\"],[\"abag\",\"adan\",\"afin\",\"agar\",\"agor\",\"akal\",\"al\",\"alarog\",\"alem\",\"aman\",\"amar\",\"ambar\",\"amon\",\"an\",\"anmaar\",\"anred\",\"ar\",\"arathar\",\"ark\",\"aroan\",\"ast\",\"astor\",\"athve\",\"ax\",\"bagar\",\"bal\",\"ban\",\"bar\",\"bor\",\"busal\",\"dag\",\"dal\",\"dan\",\"dar\",\"del\",\"di\",\"do\",\"dok\",\"drun\",\"eb\",\"edon\",\"egor\",\"el\",\"embar\",\"eor\",\"ergor\",\"ersind\",\"faru\",\"fer\",\"gar\",\"glio\",\"gril\",\"har\",\"hax\",\"herg\",\"hor\",\"iabar\",\"ind\",\"iod\",\"kan\",\"kor\",\"laban\",\"lamar\",\"lem\",\"loar\",\"lobai\",\"maar\",\"man\",\"mar\",\"mer\",\"mergor\",\"nod\",\"nomer\",\"oban\",\"obor\",\"odan\",\"odar\",\"oel\",\"ofal\",\"okrag\",\"olas\",\"omar\",\"omer\",\"onar\",\"ondo\",\"orek\",\"orman\",\"orog\",\"oun\",\"ovar\",\"raban\",\"radeon\",\"ramal\",\"ramer\",\"ramon\",\"rek\",\"rel\",\"roan\",\"roun\",\"ska\",\"tar\",\"tas\",\"thar\",\"thor\",\"trod\",\"ulfu\",\"uma\",\"un\",\"usk\",\"val\",\"valg\",\"van\",\"var\",\"vosin\"]],\n    \"symbaroumn\":[[\"Ag\",\"Alm\",\"Alr\",\"And\",\"Ar\",\"Arv\",\"Clor\",\"D\",\"E\",\"Ear\",\"El\",\"Eor\",\"Fel\",\"G\",\"Gr\",\"H\",\"I\",\"Ir\",\"K\",\"Ks\",\"L\",\"M\",\"Men\",\"Mer\",\"Na\",\"Om\",\"Ser\",\"V\",\"X\",\"Y\",\"S\"],[\"_\",\"ab\",\"al\",\"ala\",\"am\",\"an\",\"and\",\"anth\",\"ar\",\"ar\",\"as\",\"asm\",\"eb\",\"ek\",\"el\",\"em\",\"erb\",\"esp\",\"ial\",\"iar\",\"id\",\"oder\",\"oh\",\"om\",\"or\",\"orv\",\"oum\",\"ur\",\"ymb\",\"ior\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"ad\",\"ag\",\"al\",\"am\",\"an\",\"ar\",\"ath\",\"av\",\"ed\",\"er\",\"fin\",\"i\",\"ia\",\"ian\",\"kha\",\"kun\",\"mi\",\"na\",\"o\",\"on\",\"or\",\"oum\",\"ra\",\"iol\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"-Ald\",\"-Eth\",\"-Han\",\"-Lo\",\"ag\",\"an\",\"ana\",\"do\",\"fu\",\"Na\",\"on\",\"ra\",\"ra\",\"-Yah\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\" Apak\",\" Ilak\",\" Sopak\",\"an\",\"ikel\",\"urel\",\"an\"]],\n    \"umanorapito-femmina\":[[\"An\",\"Al\",\"Ar\",\"Ba\",\"Bé\",\"E\",\"El\",\"En\",\"Er\",\"Fa\",\"Fé\",\"Fi\",\"Il\",\"Im\",\"In\",\"Is\",\"Lo\",\"U\",\"Ul\",\"Um\",\"Un\",\"Vi\",\"Vim\",\"Vin\",\"Vir\",\"Mi\",\"Ma\",\"Na\",\"Sa\",\"Si\",\"Em\"],[\"a\",\"ba\",\"da\",\"di\",\"ga\",\"ha\",\"hi\",\"ial\",\"id\",\"il\",\"ji\",\"ma\",\"mi\",\"na\",\"nam\",\"ra\",\"ri\",\"ama\",\"al\",\"fa\",\"fi\",\"ja\",\"la\",\"li\",\"sa\",\"si\",\"ta\",\"ti\",\"va\",\"vi\"]],\n    \"umanorapito-maschio\":[[\"A\",\"Aw\",\"B\",\"Ba\",\"D\",\"Dal\",\"Er\",\"F\",\"Ga\",\"Gu\",\"H\",\"I\",\"J\",\"Jar\",\"Jir\",\"K\",\"Ka\",\"Kel\",\"Lo\",\"Ma\",\"Na\",\"Ol\",\"Om\",\"Or\",\"R\",\"Rah\",\"S\",\"Sah\",\"T\",\"Th\",\"Ym\"],[\"_\",\"ael\",\"al\",\"ald\",\"am\",\"an\",\"ao\",\"ar\",\"ay\",\"éan\",\"el\",\"em\",\"en\",\"éo\",\"eon\",\"er\",\"ey\",\"ial\",\"iel\",\"im\",\"in\",\"io\",\"iol\",\"ir\",\"oan\",\"oel\",\"om\",\"on\",\"or\",\"yk\",\"ys\"]],\n    \"nano-nome\":[[\"A\",\"Al\",\"Ar\",\"Bel\",\"Ber\",\"Bol\",\"Bra\",\"Do\",\"Dol\",\"Dra\",\"Dro\",\"Du\",\"Ekade\",\"Is\",\"Ja\",\"Jo\",\"Jou\",\"Ka\",\"Kar\",\"Ker\",\"Ki\",\"Ko\",\"Kor\",\"Kou\",\"Ku\",\"La\",\"Li\",\"Lo\",\"Lou\",\"Lu\",\"Ma\",\"Mag\",\"Mal\",\"Mar\",\"Mi\",\"Mig\",\"Mir\",\"Mo\",\"Mog\",\"Mou\",\"Mu\",\"Mur\",\"O\",\"Ok\",\"Ol\",\"Ou\",\"Ouk\",\"Our\",\"Pie\",\"Ra\",\"Rad\",\"Ri\",\"Ro\",\"Rod\",\"Ru\",\"Rud\",\"Ska\",\"Sko\",\"Sta\",\"Sto\",\"Ta\",\"Tar\",\"Ter\",\"To\",\"Tok\",\"Tor\",\"Tru\",\"Tu\",\"Val\",\"Van\",\"Ves\",\"Vla\",\"Vla\",\"Vlo\",\"Vol\",\"Von\",\"Vul\",\"Vun\",\"Ya\",\"Za\",\"Zal\",\"Zar\",\"Zi\",\"Zil\",\"Zo\",\"Zol\",\"Zor\",\"Zu\",\"Zul\",\"Zur\"],[\"bald\",\"abel\",\"azor\",\"ban\",\"barn\",\"baz\",\"bek\",\"ber\",\"bold\",\"bon\",\"bor\",\"born\",\"brak\",\"bril\",\"brok\",\"bruk\",\"buld\",\"bun\",\"bur\",\"dan\",\"dar\",\"don\",\"dor\",\"dum\",\"dur\",\"gar\",\"gor\",\"gûn\",\"gur\",\"iza\",\"izo\",\"kal\",\"kar\",\"kaz\",\"kil\",\"ko\",\"kol\",\"kor\",\"kur\",\"mak\",\"man\",\"mar\",\"maz\",\"mel\",\"mil\",\"mos\",\"na\",\"nak\",\"nar\",\"nek\",\"nik\",\"nor\",\"nos\",\"nuk\",\"nur\",\"nyx\",\"obel\",\"ra\",\"rak\",\"rek\",\"rik\",\"ro\",\"rok\",\"roza\",\"ru\",\"ruk\",\"sa\",\"sak\",\"sik\",\"so\",\"sok\",\"suk\",\"ta\",\"tak\",\"tal\",\"tar\",\"taz\",\"tek\",\"tel\",\"tero\",\"to\",\"tok\",\"tor\",\"tu\",\"tuk\",\"tul\",\"tur\",\"ty\",\"tyl\",\"zak\",\"zar\",\"zek\",\"zir\",\"zor\",\"zuk\",\"zur\"]],\n    \"nano-cognome\":[[\"A\",\"Ba\",\"Bo\",\"Bu\",\"Ka\",\"Ke\",\"Ki\",\"Ko\",\"Ma\",\"Me\",\"Mi\",\"Mo\",\"O\",\"Ra\",\"Ro\",\"Ru\",\"Skra\",\"Skri\",\"Skro\",\"Skru\",\"Sta\",\"Sto\",\"U\",\"Va\",\"Vo\",\"Vu\"],[\"bk\",\"br\",\"k\",\"kb\",\"kl\",\"kn\",\"kr\",\"l\",\"ld\",\"lk\",\"lr\",\"lt\",\"lz\",\"n\",\"nk\",\"nz\",\"r\",\"rk\",\"rl\",\"rz\",\"t\",\"tz\",\"z\",\"zk\",\"\",\"zt\",\"zz\",\"b\",\"k\",\"l\",\"m\",\"n\",\"r\",\"t\",\"v\"],[\"a\",\"ag\",\"e\",\"eg\",\"o\",\"og\",\"u\",\"ug\",\"y\",\"yg\"],[\"b\",\"d\",\"gr\",\"h\",\"j\",\"k\",\"kh\",\"p\",\"r\",\"s\",\"tr\",\"v\",\"x\",\"z\"],[\"a\",\"e\",\"i\",\"o\",\"u\"],[\"_\",\"k\",\"ld\",\"n\",\"r\",\"t\",\"tz\",\"z\",\"zk\"]],\n    \"elfo-femmina\":[[\"Ab\",\"Af\",\"Al\",\"Am\",\"B\",\"D\",\"E\",\"El\",\"Em\",\"En\",\"Ey\",\"F\",\"G\",\"G\",\"If\",\"Il\",\"In\",\"Ir\",\"J\",\"K\",\"K\",\"L\",\"L\",\"M\",\"M\",\"N\",\"N\",\"Ol\",\"On\",\"Or\",\"R\",\"S\",\"T\",\"T\",\"T\",\"Th\",\"Ul\",\"Um\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a'er\",\"ael\",\"aël\",\"ain\",\"al\",\"am\",\"an\",\"ar\",\"ar\",\"ar\",\"eam\",\"ean\",\"ean\",\"ear\",\"ear\",\"ei\",\"el\",\"em\",\"en\",\"er\",\"er\",\"h\",\"i\",\"im\",\"ir\",\"iv\",\"oam\",\"\",\"oan\",\"od\",\"odr\",\"oel\",\"oer\",\"oin\",\"ol\",\"on\",\"ou\"],[\"a\",\"am\",\"aela\",\"ala\",\"alaka\",\"alara\",\"aléa\",\"ama\",\"amana\",\"ana\",\"ani\",\"ara\",\"arana\",\"aya\",\"eala\",\"ealéa\",\"eana\",\"eara\",\"ema\",\"enaka\",\"eola\",\"i\",\"i\",\"ia\",\"ial\",\"ila\",\"ina\",\"oana\",\"oëla\",\"ona\",\"oya\",\"yala\",\"yoa\",\"yola\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"-Al\",\"-Il\",\"-An\",\"-B\",\"-D\",\"-E\",\"-El\",\"-Em\",\"-En\",\"-F\",\"-G\",\"-H\",\"-I\",\"-K\",\"-L\",\"-M\",\"-N\",\"-R\",\"-S\",\"-T\",\"-V\"],[\"a\",\"a\",\"aj\",\"ak\",\"al\",\"am\",\"an\",\"ar\",\"as\",\"av\",\"az\",\"e\",\"e\",\"ej\",\"ek\",\"el\",\"em\",\"en\",\"er\",\"es\",\"ev\",\"ez\",\"i\",\"i\",\"ij\",\"ik\",\"il\",\"im\",\"in\",\"ir\",\"iv\",\"iz\",\"o\",\"o\",\"oj\",\"ok\",\"ol\",\"om\",\"on\",\"or\",\"os\",\"ov\",\"oz\",\"ys\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"al\",\"an\",\"ana\",\"ar\",\"as\",\"az\",\"e\",\"el\",\"em\",\"en\",\"er\",\"il\",\"in\",\"ik\",\"ir\",\"ol\",\"on\",\"or\",\"os\",\"oz\",\"ys\"]],\n    \"elfo-maschio\":[[\"Af\",\"Ad\",\"Af\",\"Ak\",\"Al\",\"Am\",\"An\",\"Ar\",\"B\",\"D\",\"Ed\",\"Ef\",\"Ej\",\"Ek\",\"El\",\"Em\",\"En\",\"Er\",\"Es\",\"Ess\",\"F\",\"G\",\"Id\",\"If\",\"Il\",\"In\",\"Ir\",\"J\",\"K\",\"L\",\"M\",\"N\",\"Ob\",\"Od\",\"Ol\",\"On\",\"Or\",\"R\",\"S\",\"T\",\"Th\",\"Ul\",\"Um\",\"Ys\",\"Yss\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a'er\",\"a'or\",\"af\",\"ah\",\"aj\",\"ak\",\"al\",\"am\",\"an\",\"ar\",\"as\",\"at\",\"eal\",\"eam\",\"ean\",\"ear\",\"eat\",\"el\",\"em\",\"en\",\"er\",\"h\",\"is\",\"il\",\"im\",\"in\",\"ir\",\"iv\",\"o\",\"oal\",\"oam\",\"oan\",\"od\",\"odr\",\"oer\",\"of\",\"ol\",\"on\",\"or\",\"ot\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"ael\",\"ai\",\"oael\",\"aïl\",\"al\",\"aléak\",\"aléo\",\"am\",\"an\",\"ano\",\"aol\",\"ara\",\"ari\",\"eal\",\"ealéa\",\"ean\",\"eara\",\"em\",\"enak\",\"i\",\"iam\",\"ian\",\"iel\",\"il\",\"in\",\"ioël\",\"oal\",\"oam\",\"oan\",\"oar\",\"oel\",\"o\",\"oléa\",\"on\",\"ori\",\"uméa\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"-Al\",\"-Il\",\"-An\",\"-B\",\"-D\",\"-E\",\"-El\",\"-Em\",\"-En\",\"-F\",\"-G\",\"-H\",\"-I\",\"-K\",\"-L\",\"-M\",\"-N\",\"-R\",\"-S\",\"-T\",\"-V\"],[\"a\",\"a\",\"aj\",\"ak\",\"al\",\"am\",\"an\",\"ar\",\"as\",\"av\",\"az\",\"e\",\"e\",\"ej\",\"ek\",\"el\",\"em\",\"en\",\"er\",\"es\",\"ev\",\"ez\",\"i\",\"i\",\"ij\",\"ik\",\"il\",\"im\",\"in\",\"ir\",\"iv\",\"iz\",\"o\",\"o\",\"oj\",\"ok\",\"ol\",\"om\",\"on\",\"or\",\"os\",\"ov\",\"oz\",\"ys\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"al\",\"an\",\"ana\",\"ar\",\"as\",\"az\",\"e\",\"el\",\"em\",\"en\",\"er\",\"il\",\"in\",\"ik\",\"ir\",\"ol\",\"on\",\"or\",\"os\",\"oz\",\"ys\"]],\n    \"goblin-femmina\":[[\"A\",\"Ba\",\"Bo\",\"Bo\",\"Bo\",\"Fo\",\"Ga\",\"Ga\",\"Gri\",\"Gu\",\"Go\",\"Ha\",\"Ho\",\"Hu\",\"Mo\",\"Mo\",\"Ni\",\"Ni\",\"Nje\",\"Nya\",\"Ta\",\"Ta\",\"To\",\"To\",\"Tu\",\"U\",\"Wa\",\"Wo\",\"Y\",\"Y\",\"Za\"],[\"b\",\"d\",\"f\",\"g\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"r\",\"s\",\"t\",\"v\",\"z\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"b\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"kl\",\"kr\",\"l\",\"m\",\"n\",\"p\",\"pr\",\"r\",\"s\",\"w\",\"x\",\"y\"],[\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"aa\",\"e\",\"i\",\"i\",\"ia\",\"ia\",\"ia\",\"oa\",\"oa\",\"oua\",\"u\",\"ua\",\"ua\",\"ui\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"a\",\"ba\",\"da\",\"ga\",\"gla\",\"ka\",\"kla\",\"la\",\"lea\",\"lia\",\"ma\",\"ra\",\"sa\",\"ssa\",\"wa\",\"za\"]],\n    \"goblin-maschio\":[[\"Alg\",\"Arr\",\"Bar\",\"Buh\",\"D\",\"Dud\",\"Ed\",\"Ederl\",\"Err\",\"G\",\"Gam\",\"Gar\",\"Garm\",\"Gor\",\"Gr\",\"Id\",\"Ilf\",\"Lar\",\"Ler\",\"Lir\",\"Nj\",\"Odb\",\"Oddg\",\"Ogt\",\"Olf\",\"Oll\",\"Orf\",\"Orr\",\"Ort\",\"Pas\",\"Pus\",\"Shagg\",\"Shigg\",\"Shogg\",\"Shoggl\",\"Shuggl\",\"T\",\"Uddg\",\"Ugt\",\"Ul\",\"Ulf\",\"Urf\",\"Ten\",\"Tenl\",\"Dur\",\"Dor\"],[\"_\",\"_\",\"add\",\"ag\",\"alak\",\"alf\",\"alg\",\"alok\",\"als\",\"alubbung\",\"alusk\",\"am\",\"amok\",\"arak\",\"arok\",\"att\",\"egg\",\"elfons\",\"elg\",\"o\",\"odd\",\"ofin\",\"olf\",\"olg\",\"olok\",\"ols\",\"olusk\",\"om\",\"omak\",\"ons\",\"or\",\"ott\",\"udd\",\"ug\",\"ulf\",\"ulg\",\"ulk\",\"uls\",\"uluk\",\"um\",\"umuk\",\"unch\"]],\n    \"goblin-tribù\":[[\"Kl\",\"B\",\"Br\",\"G\",\"Gr\",\"H\",\"K\",\"K\",\"Kr\",\"L\",\"V\"],[\"a\",\"a\",\"e\",\"o\",\"o\",\"u\",\"i\"],[\"dd\",\"k\",\"pp\",\"r\",\"rd\",\"rr\",\"rrb\",\"tr\",\"tt\",\"kr\",\"rk\",\"kk\",\"kp\",\"rk\"],[\"a\",\"o\",\"u\",\"e\",\"y\",\"a\",\"o\",\"u\"],[\"bb\",\"br\",\"g\",\"gg\",\"gl\",\"kk\",\"kkt\",\"kr\",\"ks\",\"l\",\"lk\",\"p\",\"r\",\"rd\",\"t\",\"sk\"],[\"a\",\"i\",\"o\",\"u\",\"a\",\"o\",\"_\"],[\"bb\",\"dd\",\"gr\",\"dr\",\"rb\",\"rr\",\"gg\",\"k\",\"t\",\"ll\",\"rd\",\"d\",\"r\",\"rk\",\"tt\"],[\"_\",\"a\",\"akk\",\"o\",\"okk\",\"u\",\"ukk\",\"ik\",\"ar\",\"or\",\"ur\",\"ark\",\"urk\",\"ak\",\"ok\"]],\n    \"troll-normale\":[[\"Ag\",\"Ak\",\"Ar\",\"Bar\",\"Bav\",\"Bo\",\"Bor\",\"Bov\",\"Da\",\"El\",\"Er\",\"Gal\",\"Gar\",\"Gav\",\"Gol\",\"Lus\",\"O\",\"On\",\"Or\",\"Ra\",\"Rag\",\"Sag\",\"Sagna\",\"Sar\",\"Ska\",\"Sor\",\"Vak\",\"Vaz\",\"Vok\",\"Voz\",\"Zak\",\"Zar\",\"Zor\"],[\"_\",\"_\",\"_\",\"_\",\"_\",\"_\",\"b\",\"d\",\"_\",\"g\",\"h\",\"l\",\"m\",\"n\",\"k\",\"p\",\"v\",\"w\",\"x\",\"gr\",\"kr\",\"br\"],[\"_\",\"a\",\"ak\",\"al\",\"an\",\"anga\",\"ar\",\"aun\",\"az\",\"axar\",\"ek\",\"el\",\"er\",\"ez\",\"ok\",\"or\",\"oz\",\"ox\",\"uk\",\"un\",\"ur\",\"oxo\",\"ongo\"],[\"_\",\"_\",\"_\",\"ar\",\"dar\",\"dorg\",\"dos\",\"ga\",\"garg\",\"gha\",\"ka\",\"kar\",\"mok\",\"mor\",\"orde\",\"oum\",\"rak\",\"vak\"]],\n    \"troll-anziano\":[[\"A\",\"Ba\",\"Bo\",\"Bra\",\"Bro\",\"Bru\",\"Bu\",\"Da\",\"Do\",\"Du\",\"E\",\"Ga\",\"Go\",\"Gra\",\"Gri\",\"Gro\",\"Gru\",\"Gu\",\"Ji\",\"Jo\",\"Ka\",\"Ki\",\"Ko\",\"Kra\",\"Kro\",\"Ku\",\"La\",\"Lo\",\"Lu\",\"Ma\",\"Mo\",\"Mu\",\"O\",\"Ra\",\"Ro\",\"Ru\",\"Sa\",\"Saxna\",\"Ska\",\"Sko\",\"Sku\",\"So\",\"Su\",\"Xa\",\"Xava\",\"Xi\",\"Xo\",\"Xu\"],[\"_\",\"_\",\"_\",\"_\",\"b\",\"d\",\"dz\",\"g\",\"gr\",\"h\",\"k\",\"k\",\"kr\",\"ks\",\"l\",\"lk\",\"ll\",\"lx\",\"m\",\"n\",\"n\",\"nx\",\"r\",\"r\",\"r\",\"rg\",\"rk\",\"rx\",\"s\",\"tt\",\"v\",\"x\",\"x\",\"x\",\"x\",\"x\",\"z\"],[\"a\",\"ako\",\"axa\",\"axo\",\"e\",\"i\",\"o\",\"oka\",\"oko\",\"ou\",\"oxa\",\"u\",\"y\"],[\"_\",\"b\",\"d\",\"g\",\"h\",\"j\",\"k\",\"kr\",\"kx\",\"l\",\"m\",\"mb\",\"mg\",\"mx\",\"n\",\"nb\",\"ng\",\"nx\",\"r\",\"r\",\"rd\",\"rg\",\"rk\",\"rx\",\"s\",\"sk\",\"t\",\"tr\",\"v\",\"w\",\"x\",\"x\",\"x\",\"x\",\"x\",\"z\"],[\"a\",\"a\",\"a\",\"a\",\"a\",\"ha\",\"i\",\"i\",\"o\",\"o\",\"o\",\"o\",\"o\",\"ou\",\"u\",\"u\",\"u\"],[\"_\",\"g\",\"k\",\"kh\",\"kk\",\"l\",\"ll\",\"m\",\"n\",\"r\",\"rd\",\"rd\",\"rdax\",\"rdox\",\"rg\",\"rx\",\"rx\",\"s\",\"t\",\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\"z\"]]    \n};\n\n(()=>{\n\n    let keys = Object.keys(allNames);\n    console.log(keys);\n    let allKeys = \"\";\n    keys.forEach(t => {\n        allKeys = allKeys.concat(`<option value=\"${t}\">${t}`);\n    });\n    console.log(allKeys);\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n      <label for=\"category\">Seleziona il generatore</label>\n      <select id=\"category\" name=\"category\">${allKeys}\n      </select>\n    </div>`;\n\n    // let template = Handlebars.compile(dialog_content);\n    \n  \n    let x = new Dialog({\n      content : dialog_content,\n      alternatives: keys,\n      buttons : \n      {\n        Ok : { label : `Ok`, callback : async (html)=> await generateNames(html.find('#category')[0].value)},\n        Cancel : {label : `Annulla`}\n      }\n    });\n  \n    x.options.width = 200;\n    x.position.width = 200;\n  \n    x.render(true);\n  \n})();\n\nasync function generateNames(category)\n{\n    let message = \"\";\n    message += \"Category \"+category;\n\n    let nameParts = allNames[category];\n\n    for( let i = 0; i < 10; i++) {\n        let fullName = \"\";\n\n        for ( let syllabel of nameParts ) {\n            let syllabelIndex = Math.floor(Math.random() * syllabel.length);\n            let actualSyllabel = syllabel[syllabelIndex];\n            if( actualSyllabel != \"_\") {\n                fullName = fullName.concat(actualSyllabel);\n            } else {\n                break;\n            }\n        }\n        // });\n\n        message += `<br />Name ${i+1} ${fullName}`;\n    }\n\n    ChatMessage.create({\n        speaker: ChatMessage.getSpeaker({alias: \"Name generator\"}),\n        whisper: [game.user], // ChatMessage.getWhisperRecipients('GM'),\n        content: message        \n    });\n}",
      "flags": {
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298202057,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.M2pRCm23Siqt61qp",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "F7lOvpdXhOQQtSTr"
    },
    {
      "name": "Reset Corruzione Temporeanea",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/ice-aura.svg",
      "scope": "global",
      "command": "/** \n * La macro può sessere utilizzata selezionando dei token sullo schermo, se nessun token è selezionato, si possono selezionare i vari personaggi (default tutti)\n */\n (()=>{\n    let defaultCheck = \"checked\"; // set to unchecked\n    let actorslist = [];\n\n    if(canvas.tokens.controlled.length > 0) {\n        // If no actor selected\n        // Time to get busy\n        canvas.tokens.controlled.map(e => { \n            if(e.actor.data.type === \"player\") {\n                if(game.user.isGM || e.actor.owner)\n                    actorslist.push(e.actor);\n            }\n        });\n        if(actorslist.length > 0 ) \n        {\n            actorslist = [actorslist[0]];\n        }\n    } else {     \n        let gameacts = game.actors.filter(e => { if( (game.user.isGM || e.owner) && e.data.type === \"player\") { return e; } });\n        Array.prototype.push.apply(actorslist, gameacts);\n    }\n\n    let allKeys = \"\";\n    actorslist.forEach(t => {\n        allKeys = allKeys.concat(`<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"${t.data._id}\">${t.data.name}</label> </div>\n                <div><input id=\"${t.data._id}\" type=\"checkbox\" name=\"selection\" value=\"${t.data._id}\" ${defaultCheck}=\"${defaultCheck}\"></div>\n            </div>`);\n    });\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n    <h2>Seleziona i giocatori</h2>\n    ${allKeys}\n    <br />\n    </div>`;\n    let x = new Dialog({\n        title: \"Reset Corruption\",\n        content : dialog_content,\n        buttons : \n        {\n            Ok :{ label : `Ok`, callback : async (html) => {             \n                                            let tmp = html.find(\"input[name='selection']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});                                            \n                                            if(tmp.length == 0) {\n                                                ui.notifications.error(\"Need a valid number of players\");\n                                                return;\n                                            }\n                                            resetCorruption(tmp);\n                                        }\n                },\n            Cancel : {label : `Annulla`}\n        }\n    });\n    \n    x.options.width = 200;\n    x.position.width = 300;\n    \n    x.render(true);\n})();\n\nfunction resetCorruption(actorids)\n{\n    let actorNames = \"\";\n    let updates = actorids.map(a => {\n        let aexp = game.actors.get(a);\n    \n        actorNames = actorNames + \"<li>\" + aexp.name;\n\n        return {\n            _id: a,\n            \"data.health.corruption.temporary\": 0\n        };\n    });\n    \n    Actor.updateDocuments(updates);\n    let chatOptions = {\n        rollMode: game.settings.get('core', 'rollMode'),        \n        content: `<h2>La corruzione temporanea è passata</h2> \n                    I personaggi:<ul> ${actorNames}</ul> hanno ora 0 di corruzione temporanea`\n    };\n    ChatMessage.create(chatOptions);\n    // ui.notifications.info(`Added ${exp} experience to checked (${actorNames}) characters`);\n}",
      "flags": {
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298202057,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.rfxvvcoQfLNQNd4L",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "kvOfclIJTteEP9G7"
    },
    {
      "name": "Aggiungi Exp",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/upgrade.svg",
      "scope": "global",
      "command": "/** \n * La macro può sessere utilizzata selezionando dei token sullo schermo, se nessun token è selezionato, si possono selezionare i vari personaggi (default tutti)\n * \n */\n (()=>{\n    let defaultCheck = \"checked\"; // set to unchecked\n    let actorslist = [];\n\n    if(canvas.tokens.controlled.length > 0) {\n        // If no actor selected\n        // Time to get busy\n        canvas.tokens.controlled.map(e => { \n            if(e.actor.data.type === \"player\") {\n                if(game.user.isGM || e.actor.owner)\n                    actorslist.push(e.actor);\n            }\n        });\n        if(actorslist.length > 0 ) \n        {\n            actorslist = [actorslist[0]];\n        }\n    } else {     \n        let gameacts = game.actors.filter(e => { if( (game.user.isGM || e.owner) && e.data.type === \"player\") { return e; } });\n        Array.prototype.push.apply(actorslist, gameacts);\n    }\n\n    let allKeys = \"\";\n    actorslist.forEach(t => {\n        allKeys = allKeys.concat(`<div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"${t.data._id}\">${t.data.name}</label> </div>\n                <div><input id=\"${t.data._id}\" type=\"checkbox\" name=\"selection\" value=\"${t.data._id}\" ${defaultCheck}=\"${defaultCheck}\"></div>\n            </div>`);\n    });\n\n    let dialog_content = `  \n    <div class=\"form-group\">\n    <h2>Seleziona i personaggi</h2>\n    ${allKeys}\n    <br />\n    <div style=\"flex-basis: auto;flex-direction: row;display: flex;\">\n                <div style=\"width:10em;min-width:10em;\"><label for=\"experience\" style=\"width:10em;min-width:10em\">Esperienza</label></div><div><input type=\"text\" name=\"experience\" style=\"width:5em\"></div>\n    </div>\n    <br/>\n    </div>`;\n    let x = new Dialog({\n        title: \"Aggiungi Esperienza\",\n        content : dialog_content,\n        buttons : \n        {\n            Ok :{ label : `Ok`, callback : async (html) => {             \n                                            let tmp = html.find(\"input[name='selection']\").get().filter(v => { if(v.checked) return true; }).map(e => { return e.value});\n                                            let exp = parseInt(html.find(\"input[name='experience'\")[0].value);\n                                            if(isNaN(exp) || tmp.length == 0) {\n                                                ui.notifications.error(\"Serve un numero valido di esperienza, sia positivo che negativo\");\n                                                return;\n                                            }\n                                            addExperience(tmp,exp);\n                                        }\n                },\n            Cancel : {label : `Annulla`}\n        }\n    });\n    \n    x.options.width = 200;\n    x.position.width = 300;\n    \n    x.render(true);\n})();\n\nfunction addExperience(actorids, exp)\n{\n    let actorNames = \"\";\n    let updates = actorids.map(a => {\n        let aexp = game.actors.get(a);\n    \n        actorNames = actorNames + \"<li>\" + aexp.name;\n\n        return {\n            _id: a,\n            \"data.experience.total\": aexp.data.data.experience.total + exp\n        };\n    });\n    \n    Actor.update(updates);\n    let chatOptions = {\n        rollMode: game.settings.get('core', 'rollMode'),        \n        content: `<h2>Assegnazione esperienza</h2> \n                    I Personaggi:<ul> ${actorNames}</ul> hanno ricevuto ${exp} punti esperienza`\n    };\n    ChatMessage.create(chatOptions);\n    // ui.notifications.info(`Added ${exp} experience to checked (${actorNames}) characters`);\n}",
      "flags": {
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "furnace": {
          "runAsGM": false
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298202057,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.Ib9lVNzgBhxjP5EZ",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "1dYimYF3yca6E7Id"
    },
    {
      "name": "PNG Importer",
      "type": "script",
      "author": "YsmQXJ6sqv5HM9Ov",
      "img": "icons/svg/mystery-man.svg",
      "scope": "global",
      "command": "/**\n * Per usare questa macro copia dal manuale tutta la scheda del mostro\n * da nome fino alla fine della descrizione delle tattiche\n * \n * Nota: non verrà creata nessun arma\n * per il monster codex,inserisci a mano il nome, poi copia dall'atteggiamento fino alla fine.\n * Attenzione: le schede \"non dritte\" possono dar problemi, a seconda del tuo lettore pdf, potresti doverle inserire manualmente.\n * \n * Attenzione: Se hai piu oggetti che coincidono con il nome di poteri, abilità, ecc, potrebbero essere inseriti quelli.\n *  \n * controlla di aver importato tutti i poteri, abilità e tratti in Foundry.\n * \n */\n\n (()=>{\n    let dialog_content = `  \n    <div class=\"form-group\">\n      <label for=\"npctext\">Incolla i dati del PNG</label>\n      <input name=\"npctext\" type=\"text\">\n    </div>`;\n  \n    let x = new Dialog({\n      content : dialog_content,\n      buttons : \n      {\n        Ok : { label : `Ok`, callback : async (html)=> await extractAllData(html.find('[name=npctext]')[0].value.replace(/[\\r|\\n]/g, \"\"))},\n        Cancel : {label : `Annulla`}\n      }\n    });\n  \n    x.options.width = 200;\n    x.position.width = 200;\n  \n    x.render(true);\n  \n})();\n\nasync function extractSpecialItems(actorItems, type, abilitilist, abilityPattern)\n{\n    let message = \"\";\n    if( abilitilist !== null) {\n        await abilitilist.forEach(async element => { \n            let tmpdata = element.trim().match(abilityPattern);\n            console.log(\"tmpdata = \"+tmpdata);\n            if( tmpdata != null && tmpdata.length == 3)\n            {\n                let higherLevel = false;\n                let ability = game.items.filter(element => element.name.trim().toLowerCase() === tmpdata[1].trim().toLowerCase() && element.type === type);                \n                if(ability.length > 0 )\n                {\n                    // console.log(\"ability=\"+JSON.stringify(ability));\n\n                    ability = duplicate(ability[0].data);\n                    let abilityAction = \"\";\n\n                    // Master ability\n                    if(tmpdata[2] === \"Maestro\" || tmpdata[2] === \"III\") {                    \n                        higherLevel = true;\n                        setProperty(ability, \"data.master.isActive\",true);                                            \n                    }                \n                    abilityAction = getProperty(ability, \"data.master.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.master.action\", \"A\");\n                    }\n                    // Adept ability\n                    if(tmpdata[2] === \"Adepto\" || tmpdata[2] === \"II\" || higherLevel) {                \n                        higherLevel = true;\n                        setProperty(ability, \"data.adept.isActive\",true);                        \n\n                    }    \n                    abilityAction = getProperty(ability, \"data.adept.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.adept.action\", \"A\");\n                    }\n                    // Novice ability\n                    if(tmpdata[2] === \"Novizio\" || tmpdata[2] === \"I\" || higherLevel) {                              \n                        setProperty(ability, \"data.novice.isActive\",true);                        \n                    }\n                    abilityAction = getProperty(ability, \"data.novice.action\");\n                    if( abilityAction === \"\") {\n                        setProperty(ability, \"data.novice.action\", \"A\");\n                    }\n                    // console.log(\"Final ability \"+JSON.stringify(ability));\n                    console.log(\"Added ability \"+ability.name)\n                    actorItems.push(ability);\n                }\n                else if( type !== \"mysticalPower\" && type !== \"ability\" )\n                {\n                    message += `${element} non aggiunto ${type} - aggiungilo manualmente se necessario <br/>`;\n                }\n            }\n            else if( element.trim() !== \"\")\n            {\n                // message += `${element} not added - not found under Items - add manually <br/>`;\n                console.log(\"element[\"+element+\"] not found - add manually\");           \n            }\n        });\n\n    }    \n    return message;    \n}\n\nasync function extractAllData(npcData)\n{\n    let additionalInfo = \"\";\n\n    let extractData = function(inputData, inputPattern) {\n        let tmp = inputData.match(inputPattern);\n        if( tmp != null && tmp.length >= 2) {\n            // successful match\n            return tmp[1];\n        }\n        return \"nessuno\";\n    };\n    let expectedData = npcData.replace(/- /g,\"\");\n\n    let namePattern = /^(.+?) (Atteggiamento|Razza|Opposizione)/;\n    let newValues = {\n        name: extractData(expectedData,namePattern),\n        type: \"monster\",\n        folder: null,\n        sort: 12000,\n        data: {},\n        token: {},\n        items: [],\n        flags: {}        \n    }\n\n    let mannerPattern = /Atteggiamento(.*) Razza /;\n    setProperty(newValues, \"data.bio.manner\",extractData(expectedData,mannerPattern));\n    \n    let racePattern = /Razza (.*) Opposizione /;\n    setProperty(newValues, \"data.bio.race\",extractData(expectedData,racePattern));\n    \n    let attributePattern = /Astuzia ([0-9]+)/;\n    // console.log(\"Cunning[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.cunning.value\", parseInt(extractData(expectedData,attributePattern)));    \n    attributePattern = /Attenzione ([0-9]+)/;\n    // console.log(\"Vigilant[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.vigilant.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Furtività ([0-9]+)/;\n    // console.log(\"Discreet[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.discreet.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Persuasione ([0-9]+)/;\n    // console.log(\"Persuasive[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.persuasive.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Precisione ([0-9]+)/;\n    // console.log(\"Accurate[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.accurate.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Rapidità ([0-9]+).+\\)/;\n    // console.log(\"Quick[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.quick.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Tenacia ([0-9]+)/;\n    // console.log(\"Resolute[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.resolute.value\", parseInt(extractData(expectedData,attributePattern)));\n    attributePattern = /Vigore ([0-9]+)/;\n    // console.log(\"Strong[\"+extractData(expectedData,attributePattern)+\"]\");\n    setProperty(newValues, \"data.attributes.strong.value\", parseInt(extractData(expectedData,attributePattern)));\n\n    let shadowPattern = /Ombra(.*) \\(/;\n    // console.log(\"Shadow[\"+extractData(expectedData,shadowPattern)+\"]\");    \n    setProperty(newValues, \"data.bio.shadow\", extractData(expectedData,shadowPattern));\n    \n    // If nomatch == thouroughly corrupt\n    let corruptionPattern = /\\(Corruzione: ([0-9]+).?\\)/;\n    // console.log(\"Permanent Corruption[\"+extractData(expectedData,corruptionPattern)+\"]\");   \n    let corr = extractData(expectedData,corruptionPattern);\n    if( corr !== null && corr !== \"nomatch\" ) {\n        setProperty(newValues, \"data.health.corruption.permanent\", parseInt(extractData(expectedData,corruptionPattern))); \n    }\n    \n    let tacticsPattern = / Tattiche: (.*)/;\n    // console.log(\"Tactics[\"+extractData(expectedData,tacticsPattern)+\"]\");\n    setProperty(newValues, \"data.bio.tactics\", extractData(expectedData,tacticsPattern));\n\n    let actor = await Actor.create(newValues);\n\n    let abilitiesPattern = /Abilità (.*) Armi /;\n    let singleAbilityPattern = /([^,^\\)]+?\\))?/g;\n    let abilityPattern = / ?([^\\(]+)\\((.+)\\)/;\n    let allAbilities = extractData(expectedData,abilitiesPattern);\n    console.log(\"allAbilities:\"+allAbilities);\n    let abilitilist = allAbilities.match(singleAbilityPattern);\n    let actorItems = [];\n    console.log(\"abilitylist:\"+abilitilist);\n\n    // Normal abilities\n    // Medicus (master), \n    additionalInfo += await extractSpecialItems(actorItems, \"ability\", abilitilist, abilityPattern);\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, abilityPattern);\n\n    // Mystical Power\n    // let mysticalPowerPattern = /Mystical [Pp]ower \\(([^,]+), ([^\\)]*)\\)/g;\n    //let singleMysticalPowerPattern = /Potere Mistico (([^,]))/g;  \n    let singleMysticalPowerPattern = /\\: ?([^\\)]+.)?/g; \n    abilitilist = allAbilities.match(singleMysticalPowerPattern);\n    let mysticalPowerPattern = /\\: ?([^\\)]+)\\((.*?)\\)/\n    console.log(\"abilitylist[mp]:\"+JSON.stringify(abilitilist));\n    // Mystical Power (Bend Will, master)\n    additionalInfo += await extractSpecialItems(actorItems, \"mysticalPower\", abilitilist, mysticalPowerPattern);\n\n    let traitsPattern = /Tratti (.+) Astuzia [0-9]/;\n    console.log(\"Traits[\"+extractData(expectedData,traitsPattern)+\"]\");\n    let traitstlist = extractData(expectedData,traitsPattern).match(singleAbilityPattern);\n    // console.log(\"traitslist =\"+JSON.stringify(traitstlist));\n    additionalInfo += await extractSpecialItems(actorItems, \"trait\", traitstlist, abilityPattern);\n\n    // console.log(\"actorItems:\"+JSON.stringify(actorItems));\n\n    let updateObj = await actor.createEmbeddedDocuments(\"Item\", actorItems);\n    // console.log(\"updateObj \"+JSON.stringify(updateObj));\n\n\n    let healMe = {_id:actor.id};\n    setProperty(healMe, \"data.health.toughness.value\", getProperty(actor, \"data.data.health.toughness.max\") );\n    await Actor.updateDocuments([healMe]);\n\n    let message = `Created ${actor.name}<br/>${additionalInfo}`;\n    ChatMessage.create({\n        speaker: ChatMessage.getSpeaker({alias: \"NPC Importer Macro\"}),\n        whisper: [game.user],\n        content: message\n    });\n\n}",
      "flags": {
        "furnace": {
          "runAsGM": false
        },
        "combat-utility-belt": {
          "macroTrigger": ""
        },
        "core": {}
      },
      "ownership": {
        "default": 0,
        "IJbBQp9HIZhYkNtD": 3,
        "yBOfnkxE5pvS5PPZ": 3,
        "YsmQXJ6sqv5HM9Ov": 3
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1664298202058,
        "modifiedTime": 1717742552516,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Macro.rovDHjS4ZPvgmWZM",
        "duplicateSource": null,
        "exportSource": null
      },
      "folder": "Sp4tJC2h4XUNxWtv",
      "sort": 0,
      "_id": "eRaeW8W91SeE7Xlz"
    }
  ],
  "cards": [],
  "playlists": [],
  "folders": [
    {
      "name": "IT - Macro",
      "type": "Macro",
      "folder": null,
      "description": "",
      "sorting": "a",
      "sort": 0,
      "color": null,
      "flags": {
        "core": {}
      },
      "_stats": {
        "systemId": "symbaroum",
        "systemVersion": "4.5.0",
        "coreVersion": "13.344",
        "createdTime": 1717742552548,
        "modifiedTime": 1717742552548,
        "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
        "compendiumSource": "Folder.Sp4tJC2h4XUNxWtv",
        "duplicateSource": null,
        "exportSource": null
      },
      "_id": "Sp4tJC2h4XUNxWtv"
    }
  ],
  "_id": "vZUMJeu1eenlI33D",
  "flags": {},
  "_stats": {
    "systemId": "symbaroum",
    "systemVersion": "4.0.0",
    "coreVersion": "13.344",
    "createdTime": 1664298421068,
    "modifiedTime": 1717742768438,
    "lastModifiedBy": "YsmQXJ6sqv5HM9Ov",
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null
  },
  "folder": null,
  "_key": "!adventures!vZUMJeu1eenlI33D"
}
